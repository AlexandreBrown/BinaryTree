        -:    0:Source:/home/brownthedev/Documents/uLaval/Hiver2021/IFT-2008 Algorithmes et structures de données/IFT-2008-BinarySearchTreeADT/BinaryTrees/src/test/BinarySearchTreeExpectations.h
        -:    0:Graph:/home/brownthedev/Documents/uLaval/Hiver2021/IFT-2008 Algorithmes et structures de données/IFT-2008-BinarySearchTreeADT/BinaryTrees/cmake-build-debug-coverage/CMakeFiles/BinaryTrees_test.dir/src/test/BinarySearchTreeTest.cpp.gcno
        -:    0:Data:/home/brownthedev/Documents/uLaval/Hiver2021/IFT-2008 Algorithmes et structures de données/IFT-2008-BinarySearchTreeADT/BinaryTrees/cmake-build-debug-coverage/CMakeFiles/BinaryTrees_test.dir/src/test/BinarySearchTreeTest.cpp.gcda
        -:    0:Runs:1
        -:    1:#ifndef BINARYTREES_SRC_TEST_BINARYSEARCHTREEEXPECTATIONS_H_
        -:    2:#define BINARYTREES_SRC_TEST_BINARYSEARCHTREEEXPECTATIONS_H_
        -:    3:
        -:    4:using std::to_string;
        -:    5:
        -:    6:class BinarySearchTreeExpectations {
        -:    7:
        -:    8:	public:
        -:    9:
        -:   10:		template<typename T>
        -:   11:		static std::string getExpectedTreeOutputFormat(const std::initializer_list<T>& elements);
        -:   12:};
        -:   13:
        -:   14:template<typename T>
        3:   15:std::string BinarySearchTreeExpectations::getExpectedTreeOutputFormat(const std::initializer_list<T>& elements) {
        -:   16:
        3:   17:	std::string result;
        3:   17-block  0
        -:   18:
       24:   19:	for (auto elementIterator = elements.begin(); elementIterator != elements.end() ; ++elementIterator) {
       24:   19-block  0
       21:   20:		result += to_string(*elementIterator) + ";";
       21:   20-block  0
       21:   20-block  1
       21:   20-block  2
       21:   20-block  3
    $$$$$:   20-block  4
    $$$$$:   20-block  5
    $$$$$:   20-block  6
    $$$$$:   20-block  7
        -:   21:	}
        -:   22:
        3:   23:	return result;
        3:   23-block  0
        3:   23-block  1
        -:   24:}
        -:   25:
        -:   26:#endif
