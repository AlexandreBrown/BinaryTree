        -:    0:Source:/home/brownthedev/Documents/uLaval/Hiver2021/IFT-2008 Algorithmes et structures de données/IFT-2008-BinarySearchTreeADT/BinaryTrees/src/main/BinarySearchTree.tpp
        -:    0:Graph:/home/brownthedev/Documents/uLaval/Hiver2021/IFT-2008 Algorithmes et structures de données/IFT-2008-BinarySearchTreeADT/BinaryTrees/cmake-build-debug-coverage/CMakeFiles/BinaryTrees_test.dir/src/test/BinarySearchTreeTest.cpp.gcno
        -:    0:Data:/home/brownthedev/Documents/uLaval/Hiver2021/IFT-2008 Algorithmes et structures de données/IFT-2008-BinarySearchTreeADT/BinaryTrees/cmake-build-debug-coverage/CMakeFiles/BinaryTrees_test.dir/src/test/BinarySearchTreeTest.cpp.gcda
        -:    0:Runs:1
        -:    1:#include "BinarySearchTree.h"
        -:    2:
        -:    3:template<typename Comparable, typename NodeType>
       34:    4:BinarySearchTree<Comparable, NodeType>::BinarySearchTree() : root{nullptr} {}
------------------
_ZN16BinarySearchTreeIm10BinaryNodeImEEC2Ev:
       33:    4:BinarySearchTree<Comparable, NodeType>::BinarySearchTree() : root{nullptr} {}
------------------
_ZN16BinarySearchTreeIi10BinaryNodeIiEEC2Ev:
        1:    4:BinarySearchTree<Comparable, NodeType>::BinarySearchTree() : root{nullptr} {}
------------------
        -:    5:
        -:    6:template<typename Comparable, typename NodeType>
        1:    7:BinarySearchTree<Comparable, NodeType>::BinarySearchTree(const BinarySearchTree& rhs) : root{nullptr} {
        1:    8:	root = clone(rhs.root);
        1:    8-block  0
        1:    9:}
        -:   10:
        -:   11:template<typename Comparable, typename NodeType>
       21:   12:NodeType* BinarySearchTree<Comparable, NodeType>::clone(NodeType* t) const {
       21:   13:	if (t==nullptr) {
       12:   14:		return nullptr;
        -:   15:	}
        9:   16:	return new NodeType(
        9:   17:		t->element,
        -:   18:		clone(t->left),
        -:   19:		clone(t->right)
        9:   20:	);
        -:   21:}
------------------
_ZNK16BinarySearchTreeIm10BinaryNodeImEE5cloneEPS1_:
       12:   12:NodeType* BinarySearchTree<Comparable, NodeType>::clone(NodeType* t) const {
       12:   13:	if (t==nullptr) {
       12:   13-block  0
        7:   14:		return nullptr;
        7:   14-block  0
        -:   15:	}
        5:   16:	return new NodeType(
        5:   16-block  0
        5:   17:		t->element,
        -:   18:		clone(t->left),
        -:   19:		clone(t->right)
        5:   20:	);
        -:   21:}
------------------
_ZNK16BinarySearchTreeIi10BinaryNodeIiEE5cloneEPS1_:
        9:   12:NodeType* BinarySearchTree<Comparable, NodeType>::clone(NodeType* t) const {
        9:   13:	if (t==nullptr) {
        9:   13-block  0
        5:   14:		return nullptr;
        5:   14-block  0
        -:   15:	}
        4:   16:	return new NodeType(
        4:   16-block  0
        4:   17:		t->element,
        -:   18:		clone(t->left),
        -:   19:		clone(t->right)
        4:   20:	);
        -:   21:}
------------------
        -:   22:
        -:   23:template<typename Comparable, typename NodeType>
        -:   24:BinarySearchTree<Comparable, NodeType>::BinarySearchTree(BinarySearchTree<Comparable, NodeType>&& rhs): root{nullptr} {
        -:   25:	root = clone(rhs.root);
        -:   26:}
        -:   27:
        -:   28:template<typename Comparable, typename NodeType>
      35*:   29:BinarySearchTree<Comparable, NodeType>::~BinarySearchTree() {
       35:   30:	makeEmpty();
      35*:   31:}
------------------
_ZN16BinarySearchTreeIm10BinaryNodeImEED0Ev:
    #####:   29:BinarySearchTree<Comparable, NodeType>::~BinarySearchTree() {
        -:   30:	makeEmpty();
    #####:   31:}
    %%%%%:   31-block  0
------------------
_ZN16BinarySearchTreeIm10BinaryNodeImEED2Ev:
       33:   29:BinarySearchTree<Comparable, NodeType>::~BinarySearchTree() {
       33:   30:	makeEmpty();
       33:   31:}
       33:   31-block  0
------------------
_ZN16BinarySearchTreeIi10BinaryNodeIiEED0Ev:
    #####:   29:BinarySearchTree<Comparable, NodeType>::~BinarySearchTree() {
        -:   30:	makeEmpty();
    #####:   31:}
    %%%%%:   31-block  0
------------------
_ZN16BinarySearchTreeIi10BinaryNodeIiEED2Ev:
        2:   29:BinarySearchTree<Comparable, NodeType>::~BinarySearchTree() {
        2:   30:	makeEmpty();
        2:   31:}
        2:   31-block  0
------------------
        -:   32:
        -:   33:template<typename Comparable, typename NodeType>
       41:   34:void BinarySearchTree<Comparable, NodeType>::makeEmpty() {
       41:   35:	makeEmpty(root);
       41:   36:}
------------------
_ZN16BinarySearchTreeIi10BinaryNodeIiEE9makeEmptyEv:
        2:   34:void BinarySearchTree<Comparable, NodeType>::makeEmpty() {
        2:   35:	makeEmpty(root);
        2:   35-block  0
        2:   36:}
------------------
_ZN16BinarySearchTreeIm10BinaryNodeImEE9makeEmptyEv:
       39:   34:void BinarySearchTree<Comparable, NodeType>::makeEmpty() {
       39:   35:	makeEmpty(root);
       39:   35-block  0
       39:   36:}
------------------
        -:   37:
        -:   38:template<typename Comparable, typename NodeType>
      197:   39:void BinarySearchTree<Comparable, NodeType>::makeEmpty(NodeType*& t) {
      197:   40:	if (t!=nullptr) {
       78:   41:		makeEmpty(t->left);
       78:   42:		makeEmpty(t->right);
       78:   43:		delete t;
        -:   44:	}
        -:   45:
      197:   46:	t = nullptr;
      197:   47:}
------------------
_ZN16BinarySearchTreeIi10BinaryNodeIiEE9makeEmptyERPS1_:
       18:   39:void BinarySearchTree<Comparable, NodeType>::makeEmpty(NodeType*& t) {
       18:   40:	if (t!=nullptr) {
       18:   40-block  0
        8:   41:		makeEmpty(t->left);
        8:   41-block  0
        8:   42:		makeEmpty(t->right);
        8:   43:		delete t;
        8:   43-block  0
        -:   44:	}
        -:   45:
       18:   46:	t = nullptr;
       18:   47:}
------------------
_ZN16BinarySearchTreeIm10BinaryNodeImEE9makeEmptyERPS1_:
      179:   39:void BinarySearchTree<Comparable, NodeType>::makeEmpty(NodeType*& t) {
      179:   40:	if (t!=nullptr) {
      179:   40-block  0
       70:   41:		makeEmpty(t->left);
       70:   41-block  0
       70:   42:		makeEmpty(t->right);
       70:   43:		delete t;
       70:   43-block  0
        -:   44:	}
        -:   45:
      179:   46:	t = nullptr;
      179:   47:}
------------------
        -:   48:
        -:   49:template<typename Comparable, typename NodeType>
       27:   50:bool BinarySearchTree<Comparable, NodeType>::contains(const Comparable& x) const {
       27:   51:	return contains(x, root);
        -:   52:}
------------------
_ZNK16BinarySearchTreeIi10BinaryNodeIiEE8containsERKi:
        4:   50:bool BinarySearchTree<Comparable, NodeType>::contains(const Comparable& x) const {
        4:   51:	return contains(x, root);
        4:   51-block  0
        -:   52:}
------------------
_ZNK16BinarySearchTreeIm10BinaryNodeImEE8containsERKm:
       23:   50:bool BinarySearchTree<Comparable, NodeType>::contains(const Comparable& x) const {
       23:   51:	return contains(x, root);
       23:   51-block  0
        -:   52:}
------------------
        -:   53:
        -:   54:template<typename Comparable, typename NodeType>
       56:   55:bool BinarySearchTree<Comparable, NodeType>::contains(const Comparable& x, NodeType* t) const {
       56:   56:	if (t==nullptr) {
       7*:   57:		return false;
        -:   58:	}
       49:   59:	if (x < t->element) {
       17:   60:		return contains(x, t->left);
        -:   61:	}
       32:   62:	if (t->element < x) {
       12:   63:		return contains(x, t->right);
        -:   64:	}
       20:   65:	return true;
        -:   66:}
------------------
_ZNK16BinarySearchTreeIi10BinaryNodeIiEE8containsERKiPS1_:
       10:   55:bool BinarySearchTree<Comparable, NodeType>::contains(const Comparable& x, NodeType* t) const {
       10:   56:	if (t==nullptr) {
       10:   56-block  0
    #####:   57:		return false;
    %%%%%:   57-block  0
        -:   58:	}
       10:   59:	if (x < t->element) {
       10:   59-block  0
        4:   60:		return contains(x, t->left);
        4:   60-block  0
        -:   61:	}
        6:   62:	if (t->element < x) {
        6:   62-block  0
        2:   63:		return contains(x, t->right);
        2:   63-block  0
        -:   64:	}
        4:   65:	return true;
        4:   65-block  0
        -:   66:}
------------------
_ZNK16BinarySearchTreeIm10BinaryNodeImEE8containsERKmPS1_:
       46:   55:bool BinarySearchTree<Comparable, NodeType>::contains(const Comparable& x, NodeType* t) const {
       46:   56:	if (t==nullptr) {
       46:   56-block  0
        7:   57:		return false;
        7:   57-block  0
        -:   58:	}
       39:   59:	if (x < t->element) {
       39:   59-block  0
       13:   60:		return contains(x, t->left);
       13:   60-block  0
        -:   61:	}
       26:   62:	if (t->element < x) {
       26:   62-block  0
       10:   63:		return contains(x, t->right);
       10:   63-block  0
        -:   64:	}
       16:   65:	return true;
       16:   65-block  0
        -:   66:}
------------------
        -:   67:
        -:   68:template<typename Comparable, typename NodeType>
        3:   69:const Comparable& BinarySearchTree<Comparable, NodeType>::findMin() const {
        3:   70:	if (root==nullptr) {
        3:   70-block  0
        1:   71:		throw std::logic_error{"Could not find min element of empty tree!"};
        1:   71-block  0
        1:   71-block  1
    $$$$$:   71-block  2
        -:   72:	}
        -:   73:
        2:   74:	return findMin(root)->element;
        2:   74-block  0
        2:   74-block  1
        -:   75:}
        -:   76:
        -:   77:template<typename Comparable, typename NodeType>
       4*:   78:NodeType* BinarySearchTree<Comparable, NodeType>::findMin(NodeType* t) const {
       4*:   79:	if (t->left==nullptr) {
       3*:   80:		return t;
        -:   81:	}
       1*:   82:	return findMin(t->left);
        -:   83:}
------------------
_ZNK16BinarySearchTreeIi10BinaryNodeIiEE7findMinEPS1_:
    #####:   78:NodeType* BinarySearchTree<Comparable, NodeType>::findMin(NodeType* t) const {
    #####:   79:	if (t->left==nullptr) {
    %%%%%:   79-block  0
    #####:   80:		return t;
    %%%%%:   80-block  0
        -:   81:	}
    #####:   82:	return findMin(t->left);
    %%%%%:   82-block  0
        -:   83:}
------------------
_ZNK16BinarySearchTreeIm10BinaryNodeImEE7findMinEPS1_:
        4:   78:NodeType* BinarySearchTree<Comparable, NodeType>::findMin(NodeType* t) const {
        4:   79:	if (t->left==nullptr) {
        4:   79-block  0
        3:   80:		return t;
        3:   80-block  0
        -:   81:	}
        1:   82:	return findMin(t->left);
        1:   82-block  0
        -:   83:}
------------------
        -:   84:
        -:   85:template<typename Comparable, typename NodeType>
        3:   86:const Comparable& BinarySearchTree<Comparable, NodeType>::findMax() const {
        3:   87:	if (root==nullptr) {
        3:   87-block  0
        1:   88:		throw std::logic_error{"Could not find max element of empty tree!"};
        1:   88-block  0
        1:   88-block  1
    $$$$$:   88-block  2
        -:   89:	}
        -:   90:
        2:   91:	return findMax(root)->element;
        2:   91-block  0
        2:   91-block  1
        -:   92:}
        -:   93:
        -:   94:template<typename Comparable, typename NodeType>
        4:   95:NodeType* BinarySearchTree<Comparable, NodeType>::findMax(NodeType* t) const {
        4:   96:	while (t->right!=nullptr) {
        4:   96-block  0
        2:   97:		t = t->right;
        2:   97-block  0
        -:   98:	}
        2:   99:	return t;
        2:   99-block  0
        -:  100:}
        -:  101:
        -:  102:template<typename Comparable, typename NodeType>
       56:  103:void BinarySearchTree<Comparable, NodeType>::insert(const Comparable& x) {
       56:  104:	insert(x, root);
       55:  105:}
------------------
_ZN16BinarySearchTreeIi10BinaryNodeIiEE6insertERKi:
        4:  103:void BinarySearchTree<Comparable, NodeType>::insert(const Comparable& x) {
        4:  104:	insert(x, root);
        4:  104-block  0
        4:  105:}
------------------
_ZN16BinarySearchTreeIm10BinaryNodeImEE6insertERKm:
       52:  103:void BinarySearchTree<Comparable, NodeType>::insert(const Comparable& x) {
       52:  104:	insert(x, root);
       52:  104-block  0
       51:  105:}
------------------
        -:  106:
        -:  107:template<typename Comparable, typename NodeType>
      123:  108:void BinarySearchTree<Comparable, NodeType>::insert(const Comparable& x, NodeType*& t) {
      123:  109:	if (t==nullptr) {
       55:  110:		t = new NodeType(x);
       68:  111:	} else if (x < t->element) {
       38:  112:		insert(x, t->left);
       30:  113:	} else if (t->element < x) {
       29:  114:		insert(x, t->right);
        -:  115:	} else {
       1*:  116:		throw std::logic_error{"Element is already present in the tree!"};
        -:  117:	}
      122:  118:}
------------------
_ZN16BinarySearchTreeIi10BinaryNodeIiEE6insertERKiRPS1_:
       10:  108:void BinarySearchTree<Comparable, NodeType>::insert(const Comparable& x, NodeType*& t) {
       10:  109:	if (t==nullptr) {
       10:  109-block  0
        4:  110:		t = new NodeType(x);
        4:  110-block  0
        6:  111:	} else if (x < t->element) {
        6:  111-block  0
        4:  112:		insert(x, t->left);
        4:  112-block  0
        2:  113:	} else if (t->element < x) {
        2:  113-block  0
        2:  114:		insert(x, t->right);
        2:  114-block  0
        -:  115:	} else {
    #####:  116:		throw std::logic_error{"Element is already present in the tree!"};
    %%%%%:  116-block  0
    %%%%%:  116-block  1
    $$$$$:  116-block  2
        -:  117:	}
       10:  118:}
       10:  118-block  0
------------------
_ZN16BinarySearchTreeIm10BinaryNodeImEE6insertERKmRPS1_:
      113:  108:void BinarySearchTree<Comparable, NodeType>::insert(const Comparable& x, NodeType*& t) {
      113:  109:	if (t==nullptr) {
      113:  109-block  0
       51:  110:		t = new NodeType(x);
       51:  110-block  0
       62:  111:	} else if (x < t->element) {
       62:  111-block  0
       34:  112:		insert(x, t->left);
       34:  112-block  0
       28:  113:	} else if (t->element < x) {
       28:  113-block  0
       27:  114:		insert(x, t->right);
       27:  114-block  0
        -:  115:	} else {
        1:  116:		throw std::logic_error{"Element is already present in the tree!"};
        1:  116-block  0
        1:  116-block  1
    $$$$$:  116-block  2
        -:  117:	}
      112:  118:}
      112:  118-block  0
------------------
        -:  119:
        -:  120:template<typename Comparable, typename NodeType>
       22:  121:void BinarySearchTree<Comparable, NodeType>::insert(Comparable&& x) {
       22:  122:	insert(std::move(x), root);
       22:  122-block  0
       21:  123:}
        -:  124:
        -:  125:template<typename Comparable, typename NodeType>
      68*:  126:void BinarySearchTree<Comparable, NodeType>::insert(Comparable&& x, NodeType*& t) {
      68*:  127:	if (t==nullptr) {
      21*:  128:		t = new NodeType(std::move(x));
      47*:  129:	} else if (x < t->element) {
       6*:  130:		insert(std::move(x), t->left);
      41*:  131:	} else if (t->element < x) {
      40*:  132:		insert(std::move(x), t->right);
        -:  133:	} else {
       1*:  134:		throw std::logic_error{"Element is already present in the tree!"};
        -:  135:	}
      67*:  136:}
------------------
_ZN16BinarySearchTreeIi10BinaryNodeIiEE6insertEOiRPS1_:
    #####:  126:void BinarySearchTree<Comparable, NodeType>::insert(Comparable&& x, NodeType*& t) {
    #####:  127:	if (t==nullptr) {
    %%%%%:  127-block  0
    #####:  128:		t = new NodeType(std::move(x));
    %%%%%:  128-block  0
    #####:  129:	} else if (x < t->element) {
    %%%%%:  129-block  0
    #####:  130:		insert(std::move(x), t->left);
    %%%%%:  130-block  0
    #####:  131:	} else if (t->element < x) {
    %%%%%:  131-block  0
    #####:  132:		insert(std::move(x), t->right);
    %%%%%:  132-block  0
        -:  133:	} else {
    #####:  134:		throw std::logic_error{"Element is already present in the tree!"};
    %%%%%:  134-block  0
    %%%%%:  134-block  1
    $$$$$:  134-block  2
        -:  135:	}
    #####:  136:}
    %%%%%:  136-block  0
------------------
_ZN16BinarySearchTreeIm10BinaryNodeImEE6insertEOmRPS1_:
       68:  126:void BinarySearchTree<Comparable, NodeType>::insert(Comparable&& x, NodeType*& t) {
       68:  127:	if (t==nullptr) {
       68:  127-block  0
       21:  128:		t = new NodeType(std::move(x));
       21:  128-block  0
       47:  129:	} else if (x < t->element) {
       47:  129-block  0
        6:  130:		insert(std::move(x), t->left);
        6:  130-block  0
       41:  131:	} else if (t->element < x) {
       41:  131-block  0
       40:  132:		insert(std::move(x), t->right);
       40:  132-block  0
        -:  133:	} else {
        1:  134:		throw std::logic_error{"Element is already present in the tree!"};
        1:  134-block  0
        1:  134-block  1
    $$$$$:  134-block  2
        -:  135:	}
       67:  136:}
       67:  136-block  0
------------------
        -:  137:
        -:  138:template<typename Comparable, typename NodeType>
        8:  139:void BinarySearchTree<Comparable, NodeType>::remove(const Comparable& x) {
        8:  140:	remove(x, root);
        8:  140-block  0
        8:  141:}
        -:  142:
        -:  143:template<typename Comparable, typename NodeType>
      13*:  144:void BinarySearchTree<Comparable, NodeType>::remove(const Comparable& x, NodeType*& t) {
      13*:  145:	if (t==nullptr) {
       1*:  146:		return;
        -:  147:	}
        -:  148:
      12*:  149:	if (x < t->element) {
       3*:  150:		remove(x, t->left);
       9*:  151:	} else if (t->element < x) {
       1*:  152:		remove(x, t->right);
       8*:  153:	} else if (has2Children(t)) {
       1*:  154:		t->element = findMin(t->right)->element;
       1*:  155:		remove(t->element, t->right);
        -:  156:	} else {
       7*:  157:		NodeType* oldNode = t;
       7*:  158:		t = (t->left!=nullptr) ? t->left : t->right;
       7*:  159:		delete oldNode;
        -:  160:	}
        -:  161:}
------------------
_ZN16BinarySearchTreeIi10BinaryNodeIiEE6removeERKiRPS1_:
    #####:  144:void BinarySearchTree<Comparable, NodeType>::remove(const Comparable& x, NodeType*& t) {
    #####:  145:	if (t==nullptr) {
    %%%%%:  145-block  0
    #####:  146:		return;
    %%%%%:  146-block  0
        -:  147:	}
        -:  148:
    #####:  149:	if (x < t->element) {
    %%%%%:  149-block  0
    #####:  150:		remove(x, t->left);
    %%%%%:  150-block  0
    #####:  151:	} else if (t->element < x) {
    %%%%%:  151-block  0
    #####:  152:		remove(x, t->right);
    %%%%%:  152-block  0
    #####:  153:	} else if (has2Children(t)) {
    %%%%%:  153-block  0
    #####:  154:		t->element = findMin(t->right)->element;
    %%%%%:  154-block  0
    #####:  155:		remove(t->element, t->right);
        -:  156:	} else {
    #####:  157:		NodeType* oldNode = t;
    #####:  158:		t = (t->left!=nullptr) ? t->left : t->right;
    %%%%%:  158-block  0
    %%%%%:  158-block  1
    %%%%%:  158-block  2
    #####:  159:		delete oldNode;
    %%%%%:  159-block  0
    %%%%%:  159-block  1
        -:  160:	}
        -:  161:}
------------------
_ZN16BinarySearchTreeIm10BinaryNodeImEE6removeERKmRPS1_:
       13:  144:void BinarySearchTree<Comparable, NodeType>::remove(const Comparable& x, NodeType*& t) {
       13:  145:	if (t==nullptr) {
       13:  145-block  0
        1:  146:		return;
        1:  146-block  0
        -:  147:	}
        -:  148:
       12:  149:	if (x < t->element) {
       12:  149-block  0
        3:  150:		remove(x, t->left);
        3:  150-block  0
        9:  151:	} else if (t->element < x) {
        9:  151-block  0
        1:  152:		remove(x, t->right);
        1:  152-block  0
        8:  153:	} else if (has2Children(t)) {
        8:  153-block  0
        1:  154:		t->element = findMin(t->right)->element;
        1:  154-block  0
        1:  155:		remove(t->element, t->right);
        -:  156:	} else {
        7:  157:		NodeType* oldNode = t;
        7:  158:		t = (t->left!=nullptr) ? t->left : t->right;
        7:  158-block  0
        2:  158-block  1
        5:  158-block  2
        7:  159:		delete oldNode;
        7:  159-block  0
        7:  159-block  1
        -:  160:	}
        -:  161:}
------------------
        -:  162:
        -:  163:template<typename Comparable, typename NodeType>
       8*:  164:bool BinarySearchTree<Comparable, NodeType>::has2Children(NodeType* const& t) const {
       8*:  165:	return t->left!=nullptr && t->right!=nullptr;
        -:  166:}
------------------
_ZNK16BinarySearchTreeIi10BinaryNodeIiEE12has2ChildrenERKPS1_:
    #####:  164:bool BinarySearchTree<Comparable, NodeType>::has2Children(NodeType* const& t) const {
    #####:  165:	return t->left!=nullptr && t->right!=nullptr;
    %%%%%:  165-block  0
    %%%%%:  165-block  1
    %%%%%:  165-block  2
    %%%%%:  165-block  3
    %%%%%:  165-block  4
        -:  166:}
------------------
_ZNK16BinarySearchTreeIm10BinaryNodeImEE12has2ChildrenERKPS1_:
        8:  164:bool BinarySearchTree<Comparable, NodeType>::has2Children(NodeType* const& t) const {
        8:  165:	return t->left!=nullptr && t->right!=nullptr;
        8:  165-block  0
        3:  165-block  1
        1:  165-block  2
        7:  165-block  3
        8:  165-block  4
        -:  166:}
------------------
        -:  167:
        -:  168:template<typename Comparable, typename NodeType>
        6:  169:bool BinarySearchTree<Comparable, NodeType>::isEmpty() const {
        6:  170:	return root==nullptr;
        6:  170-block  0
        -:  171:}
        -:  172:
        -:  173:template<typename Comparable, typename NodeType>
        2:  174:BinarySearchTree<Comparable, NodeType>& BinarySearchTree<Comparable, NodeType>::operator=(const BinarySearchTree& rhs) {
        -:  175:
        2:  176:	if (this->root!=rhs.root) {
        2:  176-block  0
        2:  177:		makeEmpty();
        2:  177-block  0
        2:  178:		root = clone(rhs.root);
        -:  179:	}
        -:  180:
        2:  181:	return *this;
        2:  181-block  0
        -:  182:}
        -:  183:
        -:  184:template<typename Comparable, typename NodeType>
        -:  185:BinarySearchTree<Comparable, NodeType>& BinarySearchTree<Comparable, NodeType>::operator=(BinarySearchTree&& rhs) {
        -:  186:
        -:  187:	if (this->root!=rhs.root) {
        -:  188:		makeEmpty();
        -:  189:		root = clone(rhs.root);
        -:  190:	}
        -:  191:
        -:  192:	return *this;
        -:  193:}
        -:  194:
        -:  195:template<typename Comparable, typename NodeType>
        1:  196:void BinarySearchTree<Comparable, NodeType>::printTreeInSymmetricOrder(std::ostream& out) const {
        1:  197:	printTreeInSymmetricOrder(root, out);
        1:  197-block  0
        1:  198:}
        -:  199:
        -:  200:template<typename Comparable, typename NodeType>
       15:  201:void BinarySearchTree<Comparable, NodeType>::printTreeInSymmetricOrder(NodeType* t, std::ostream& out) const {
       15:  202:	if (t==nullptr) {
       15:  202-block  0
        8:  203:		return;
        8:  203-block  0
        -:  204:	}
        -:  205:
        7:  206:	printTreeInSymmetricOrder(t->left, out);
        7:  206-block  0
        -:  207:
        7:  208:	out << t->element << ";";
        -:  209:
        7:  210:	printTreeInSymmetricOrder(t->right, out);
        -:  211:}
        -:  212:
        -:  213:template<typename Comparable, typename NodeType>
        1:  214:void BinarySearchTree<Comparable, NodeType>::printTreeInPreOrder(std::ostream& out) const {
        1:  215:	printTreeInPreOrder(root, out);
        1:  215-block  0
        1:  216:}
        -:  217:
        -:  218:template<typename Comparable, typename NodeType>
       15:  219:void BinarySearchTree<Comparable, NodeType>::printTreeInPreOrder(NodeType* t, std::ostream& out) const {
       15:  220:	if (t==nullptr) {
       15:  220-block  0
        8:  221:		return;
        8:  221-block  0
        -:  222:	}
        -:  223:
        7:  224:	out << t->element << ";";
        7:  224-block  0
        -:  225:
        7:  226:	printTreeInPreOrder(t->left, out);
        -:  227:
        7:  228:	printTreeInPreOrder(t->right, out);
        -:  229:}
        -:  230:
        -:  231:template<typename Comparable, typename NodeType>
        1:  232:void BinarySearchTree<Comparable, NodeType>::printTreeInPostOrder(std::ostream& out) const {
        1:  233:	printTreeInPostOrder(root, out);
        1:  233-block  0
        1:  234:}
        -:  235:
        -:  236:template<typename Comparable, typename NodeType>
       15:  237:void BinarySearchTree<Comparable, NodeType>::printTreeInPostOrder(NodeType* t, std::ostream& out) const {
       15:  238:	if (t==nullptr) {
       15:  238-block  0
        8:  239:		return;
        8:  239-block  0
        -:  240:	}
        -:  241:
        7:  242:	printTreeInPostOrder(t->left, out);
        7:  242-block  0
        -:  243:
        7:  244:	printTreeInPostOrder(t->right, out);
        -:  245:
        7:  246:	out << t->element << ";";
        -:  247:}
