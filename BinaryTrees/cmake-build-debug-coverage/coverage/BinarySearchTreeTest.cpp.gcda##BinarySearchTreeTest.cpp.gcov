        -:    0:Source:/home/brownthedev/Documents/uLaval/Hiver2021/IFT-2008 Algorithmes et structures de données/IFT-2008-BinarySearchTreeADT/BinaryTrees/src/test/BinarySearchTreeTest.cpp
        -:    0:Graph:/home/brownthedev/Documents/uLaval/Hiver2021/IFT-2008 Algorithmes et structures de données/IFT-2008-BinarySearchTreeADT/BinaryTrees/cmake-build-debug-coverage/CMakeFiles/BinaryTrees_test.dir/src/test/BinarySearchTreeTest.cpp.gcno
        -:    0:Data:/home/brownthedev/Documents/uLaval/Hiver2021/IFT-2008 Algorithmes et structures de données/IFT-2008-BinarySearchTreeADT/BinaryTrees/cmake-build-debug-coverage/CMakeFiles/BinaryTrees_test.dir/src/test/BinarySearchTreeTest.cpp.gcda
        -:    0:Runs:1
        -:    1:#include <gtest/gtest.h>
        -:    2:#include "../main/BinarySearchTree.h"
        -:    3:#include "../main/BinaryNode.h"
        -:    4:#include "BinarySearchTreeExpectations.h"
        -:    5:#include "utils/RandomValues.h"
        -:    6:
        -:    7:using std::logic_error;
        -:    8:using std::to_string;
        -:    9:using Random::RandomValues;
        -:   10:
        -:   11:namespace {
        -:   12:	class BinarySearchTreeTest : public testing::Test {
        -:   13:
        -:   14:		public:
        -:   15:			BinarySearchTree<size_t, BinaryNode<size_t>> tree;
        -:   16:	};
        -:   17:}
        -:   18:
        4:   19:TEST_F(BinarySearchTreeTest, contains_return_true_when_node_is_present_in_tree) {
        -:   20:
        1:   21:	auto expectedValue = RandomValues::getRandomNumber<size_t>();;
        1:   22:	tree.insert(expectedValue);
        -:   23:
        1:   24:	auto contains = tree.contains(expectedValue);
        -:   25:
       1*:   26:	ASSERT_TRUE(contains);
        -:   27:}
------------------
_ZN75BinarySearchTreeTest_contains_return_true_when_node_is_present_in_tree_TestC2Ev:
        1:   19:TEST_F(BinarySearchTreeTest, contains_return_true_when_node_is_present_in_tree) {
        1:   19-block  0
------------------
_ZN75BinarySearchTreeTest_contains_return_true_when_node_is_present_in_tree_TestD0Ev:
        1:   19:TEST_F(BinarySearchTreeTest, contains_return_true_when_node_is_present_in_tree) {
        1:   19-block  0
------------------
_ZN75BinarySearchTreeTest_contains_return_true_when_node_is_present_in_tree_TestD2Ev:
        1:   19:TEST_F(BinarySearchTreeTest, contains_return_true_when_node_is_present_in_tree) {
        1:   19-block  0
------------------
_ZN75BinarySearchTreeTest_contains_return_true_when_node_is_present_in_tree_Test8TestBodyEv:
        1:   19:TEST_F(BinarySearchTreeTest, contains_return_true_when_node_is_present_in_tree) {
        -:   20:
        1:   21:	auto expectedValue = RandomValues::getRandomNumber<size_t>();;
        1:   21-block  0
        1:   22:	tree.insert(expectedValue);
        -:   23:
        1:   24:	auto contains = tree.contains(expectedValue);
        1:   24-block  0
        -:   25:
       1*:   26:	ASSERT_TRUE(contains);
        1:   26-block  0
    %%%%%:   26-block  1
    %%%%%:   26-block  2
    %%%%%:   26-block  3
    %%%%%:   26-block  4
    %%%%%:   26-block  5
    $$$$$:   26-block  6
    $$$$$:   26-block  7
    $$$$$:   26-block  8
    $$$$$:   26-block  9
    $$$$$:   26-block 10
    $$$$$:   26-block 11
    $$$$$:   26-block 12
        -:   27:}
------------------
        -:   28:
        4:   29:TEST_F(BinarySearchTreeTest, contains_return_false_when_node_is_not_present_in_tree) {
        -:   30:
        1:   31:	auto expectedValue = RandomValues::getRandomNumber<size_t>();
        1:   32:	tree.insert(expectedValue + 1);
        -:   33:
        1:   34:	auto contains = tree.contains(expectedValue);
        -:   35:
       1*:   36:	ASSERT_FALSE(contains);
        -:   37:}
------------------
_ZN80BinarySearchTreeTest_contains_return_false_when_node_is_not_present_in_tree_TestC2Ev:
        1:   29:TEST_F(BinarySearchTreeTest, contains_return_false_when_node_is_not_present_in_tree) {
        1:   29-block  0
------------------
_ZN80BinarySearchTreeTest_contains_return_false_when_node_is_not_present_in_tree_TestD0Ev:
        1:   29:TEST_F(BinarySearchTreeTest, contains_return_false_when_node_is_not_present_in_tree) {
        1:   29-block  0
------------------
_ZN80BinarySearchTreeTest_contains_return_false_when_node_is_not_present_in_tree_TestD2Ev:
        1:   29:TEST_F(BinarySearchTreeTest, contains_return_false_when_node_is_not_present_in_tree) {
        1:   29-block  0
------------------
_ZN80BinarySearchTreeTest_contains_return_false_when_node_is_not_present_in_tree_Test8TestBodyEv:
        1:   29:TEST_F(BinarySearchTreeTest, contains_return_false_when_node_is_not_present_in_tree) {
        -:   30:
        1:   31:	auto expectedValue = RandomValues::getRandomNumber<size_t>();
        1:   31-block  0
        1:   32:	tree.insert(expectedValue + 1);
    $$$$$:   32-block  0
        -:   33:
        1:   34:	auto contains = tree.contains(expectedValue);
        1:   34-block  0
        -:   35:
       1*:   36:	ASSERT_FALSE(contains);
        1:   36-block  0
    %%%%%:   36-block  1
    %%%%%:   36-block  2
    %%%%%:   36-block  3
    %%%%%:   36-block  4
    %%%%%:   36-block  5
    $$$$$:   36-block  6
    $$$$$:   36-block  7
    $$$$$:   36-block  8
    $$$$$:   36-block  9
    $$$$$:   36-block 10
    $$$$$:   36-block 11
    $$$$$:   36-block 12
        -:   37:}
------------------
        -:   38:
        4:   39:TEST_F(BinarySearchTreeTest, contains_return_true_when_node_is_present_in_complex_tree) {
        -:   40:
        1:   41:	auto expectedValue = RandomValues::getRandomNumber<size_t>();
        1:   42:	tree.insert(expectedValue - 4);
        1:   43:	tree.insert(expectedValue - 3);
        1:   44:	tree.insert(expectedValue - 2);
        1:   45:	tree.insert(expectedValue - 1);
        1:   46:	tree.insert(expectedValue);
        1:   47:	tree.insert(expectedValue + 1);
        1:   48:	tree.insert(expectedValue + 2);
        1:   49:	tree.insert(expectedValue + 3);
        1:   50:	tree.insert(expectedValue + 4);
        -:   51:
        1:   52:	auto contains = tree.contains(expectedValue);
        -:   53:
       1*:   54:	ASSERT_TRUE(contains);
        -:   55:}
------------------
_ZN83BinarySearchTreeTest_contains_return_true_when_node_is_present_in_complex_tree_TestC2Ev:
        1:   39:TEST_F(BinarySearchTreeTest, contains_return_true_when_node_is_present_in_complex_tree) {
        1:   39-block  0
------------------
_ZN83BinarySearchTreeTest_contains_return_true_when_node_is_present_in_complex_tree_TestD0Ev:
        1:   39:TEST_F(BinarySearchTreeTest, contains_return_true_when_node_is_present_in_complex_tree) {
        1:   39-block  0
------------------
_ZN83BinarySearchTreeTest_contains_return_true_when_node_is_present_in_complex_tree_TestD2Ev:
        1:   39:TEST_F(BinarySearchTreeTest, contains_return_true_when_node_is_present_in_complex_tree) {
        1:   39-block  0
------------------
_ZN83BinarySearchTreeTest_contains_return_true_when_node_is_present_in_complex_tree_Test8TestBodyEv:
        1:   39:TEST_F(BinarySearchTreeTest, contains_return_true_when_node_is_present_in_complex_tree) {
        -:   40:
        1:   41:	auto expectedValue = RandomValues::getRandomNumber<size_t>();
        1:   41-block  0
        1:   42:	tree.insert(expectedValue - 4);
    $$$$$:   42-block  0
        1:   43:	tree.insert(expectedValue - 3);
        1:   43-block  0
    $$$$$:   43-block  1
        1:   44:	tree.insert(expectedValue - 2);
        1:   44-block  0
    $$$$$:   44-block  1
        1:   45:	tree.insert(expectedValue - 1);
        1:   45-block  0
    $$$$$:   45-block  1
        1:   46:	tree.insert(expectedValue);
        1:   46-block  0
        1:   47:	tree.insert(expectedValue + 1);
        1:   47-block  0
    $$$$$:   47-block  1
        1:   48:	tree.insert(expectedValue + 2);
        1:   48-block  0
    $$$$$:   48-block  1
        1:   49:	tree.insert(expectedValue + 3);
        1:   49-block  0
    $$$$$:   49-block  1
        1:   50:	tree.insert(expectedValue + 4);
        1:   50-block  0
    $$$$$:   50-block  1
        -:   51:
        1:   52:	auto contains = tree.contains(expectedValue);
        1:   52-block  0
        -:   53:
       1*:   54:	ASSERT_TRUE(contains);
        1:   54-block  0
    %%%%%:   54-block  1
    %%%%%:   54-block  2
    %%%%%:   54-block  3
    %%%%%:   54-block  4
    %%%%%:   54-block  5
    $$$$$:   54-block  6
    $$$$$:   54-block  7
    $$$$$:   54-block  8
    $$$$$:   54-block  9
    $$$$$:   54-block 10
    $$$$$:   54-block 11
    $$$$$:   54-block 12
        -:   55:}
------------------
        -:   56:
        4:   57:TEST_F(BinarySearchTreeTest, findMin_throws_logic_error_when_tree_is_empty) {
        -:   58:
       2*:   59:	ASSERT_THROW(tree.findMin(), logic_error);
        -:   60:}
------------------
_ZN71BinarySearchTreeTest_findMin_throws_logic_error_when_tree_is_empty_TestC2Ev:
        1:   57:TEST_F(BinarySearchTreeTest, findMin_throws_logic_error_when_tree_is_empty) {
        1:   57-block  0
------------------
_ZN71BinarySearchTreeTest_findMin_throws_logic_error_when_tree_is_empty_TestD0Ev:
        1:   57:TEST_F(BinarySearchTreeTest, findMin_throws_logic_error_when_tree_is_empty) {
        1:   57-block  0
------------------
_ZN71BinarySearchTreeTest_findMin_throws_logic_error_when_tree_is_empty_TestD2Ev:
        1:   57:TEST_F(BinarySearchTreeTest, findMin_throws_logic_error_when_tree_is_empty) {
        1:   57-block  0
------------------
_ZN71BinarySearchTreeTest_findMin_throws_logic_error_when_tree_is_empty_Test8TestBodyEv:
        1:   57:TEST_F(BinarySearchTreeTest, findMin_throws_logic_error_when_tree_is_empty) {
        -:   58:
       2*:   59:	ASSERT_THROW(tree.findMin(), logic_error);
        1:   59-block  0
        1:   59-block  1
        1:   59-block  2
        1:   59-block  3
        1:   59-block  4
    %%%%%:   59-block  5
    %%%%%:   59-block  6
    %%%%%:   59-block  7
    %%%%%:   59-block  8
    %%%%%:   59-block  9
    %%%%%:   59-block 10
        1:   59-block 11
    $$$$$:   59-block 12
    $$$$$:   59-block 13
    $$$$$:   59-block 14
    $$$$$:   59-block 15
    $$$$$:   59-block 16
    $$$$$:   59-block 17
    $$$$$:   59-block 18
    $$$$$:   59-block 19
    $$$$$:   59-block 20
    $$$$$:   59-block 21
    $$$$$:   59-block 22
    $$$$$:   59-block 23
    $$$$$:   59-block 24
    $$$$$:   59-block 25
    $$$$$:   59-block 26
    $$$$$:   59-block 27
    $$$$$:   59-block 28
    $$$$$:   59-block 29
        -:   60:}
------------------
        -:   61:
        4:   62:TEST_F(BinarySearchTreeTest, findMin_returns_minimum_value_when_value_is_present) {
        -:   63:
        1:   64:	auto expectedMin = RandomValues::getRandomNumber<size_t>();
        1:   65:	tree.insert(expectedMin);
        -:   66:
        1:   67:	auto min = tree.findMin();
        -:   68:
       1*:   69:	ASSERT_EQ(expectedMin, min);
        -:   70:}
------------------
_ZN77BinarySearchTreeTest_findMin_returns_minimum_value_when_value_is_present_TestC2Ev:
        1:   62:TEST_F(BinarySearchTreeTest, findMin_returns_minimum_value_when_value_is_present) {
        1:   62-block  0
------------------
_ZN77BinarySearchTreeTest_findMin_returns_minimum_value_when_value_is_present_TestD0Ev:
        1:   62:TEST_F(BinarySearchTreeTest, findMin_returns_minimum_value_when_value_is_present) {
        1:   62-block  0
------------------
_ZN77BinarySearchTreeTest_findMin_returns_minimum_value_when_value_is_present_TestD2Ev:
        1:   62:TEST_F(BinarySearchTreeTest, findMin_returns_minimum_value_when_value_is_present) {
        1:   62-block  0
------------------
_ZN77BinarySearchTreeTest_findMin_returns_minimum_value_when_value_is_present_Test8TestBodyEv:
        1:   62:TEST_F(BinarySearchTreeTest, findMin_returns_minimum_value_when_value_is_present) {
        -:   63:
        1:   64:	auto expectedMin = RandomValues::getRandomNumber<size_t>();
        1:   64-block  0
        1:   65:	tree.insert(expectedMin);
        -:   66:
        1:   67:	auto min = tree.findMin();
        1:   67-block  0
        -:   68:
       1*:   69:	ASSERT_EQ(expectedMin, min);
        1:   69-block  0
        1:   69-block  1
    %%%%%:   69-block  2
    %%%%%:   69-block  3
    %%%%%:   69-block  4
    %%%%%:   69-block  5
    $$$$$:   69-block  6
    $$$$$:   69-block  7
    $$$$$:   69-block  8
    $$$$$:   69-block  9
    $$$$$:   69-block 10
        -:   70:}
------------------
        -:   71:
        4:   72:TEST_F(BinarySearchTreeTest, findMin_returns_minimum_value_when_value_is_present_in_complex_tree) {
        -:   73:
        1:   74:	auto randomValue = RandomValues::getRandomNumber<size_t>();
        1:   75:	auto expectedMin = randomValue - 2;
        1:   76:	tree.insert(randomValue - 1);
        1:   77:	tree.insert(randomValue + 2);
        1:   78:	tree.insert(expectedMin);
        1:   79:	tree.insert(randomValue);
        1:   80:	tree.insert(randomValue + 1);
        -:   81:
        1:   82:	auto min = tree.findMin();
        -:   83:
       1*:   84:	ASSERT_EQ(expectedMin, min);
        -:   85:}
------------------
_ZN93BinarySearchTreeTest_findMin_returns_minimum_value_when_value_is_present_in_complex_tree_TestC2Ev:
        1:   72:TEST_F(BinarySearchTreeTest, findMin_returns_minimum_value_when_value_is_present_in_complex_tree) {
        1:   72-block  0
------------------
_ZN93BinarySearchTreeTest_findMin_returns_minimum_value_when_value_is_present_in_complex_tree_TestD0Ev:
        1:   72:TEST_F(BinarySearchTreeTest, findMin_returns_minimum_value_when_value_is_present_in_complex_tree) {
        1:   72-block  0
------------------
_ZN93BinarySearchTreeTest_findMin_returns_minimum_value_when_value_is_present_in_complex_tree_TestD2Ev:
        1:   72:TEST_F(BinarySearchTreeTest, findMin_returns_minimum_value_when_value_is_present_in_complex_tree) {
        1:   72-block  0
------------------
_ZN93BinarySearchTreeTest_findMin_returns_minimum_value_when_value_is_present_in_complex_tree_Test8TestBodyEv:
        1:   72:TEST_F(BinarySearchTreeTest, findMin_returns_minimum_value_when_value_is_present_in_complex_tree) {
        -:   73:
        1:   74:	auto randomValue = RandomValues::getRandomNumber<size_t>();
        1:   74-block  0
        1:   75:	auto expectedMin = randomValue - 2;
        1:   76:	tree.insert(randomValue - 1);
    $$$$$:   76-block  0
        1:   77:	tree.insert(randomValue + 2);
        1:   77-block  0
    $$$$$:   77-block  1
        1:   78:	tree.insert(expectedMin);
        1:   78-block  0
        1:   79:	tree.insert(randomValue);
        1:   79-block  0
        1:   80:	tree.insert(randomValue + 1);
        1:   80-block  0
    $$$$$:   80-block  1
        -:   81:
        1:   82:	auto min = tree.findMin();
        1:   82-block  0
        -:   83:
       1*:   84:	ASSERT_EQ(expectedMin, min);
        1:   84-block  0
        1:   84-block  1
    %%%%%:   84-block  2
    %%%%%:   84-block  3
    %%%%%:   84-block  4
    %%%%%:   84-block  5
    $$$$$:   84-block  6
    $$$$$:   84-block  7
    $$$$$:   84-block  8
    $$$$$:   84-block  9
    $$$$$:   84-block 10
        -:   85:}
------------------
        -:   86:
        4:   87:TEST_F(BinarySearchTreeTest, findMax_throws_logic_error_when_tree_is_empty) {
        -:   88:
       2*:   89:	ASSERT_THROW(tree.findMax(), logic_error);
        -:   90:}
------------------
_ZN71BinarySearchTreeTest_findMax_throws_logic_error_when_tree_is_empty_TestC2Ev:
        1:   87:TEST_F(BinarySearchTreeTest, findMax_throws_logic_error_when_tree_is_empty) {
        1:   87-block  0
------------------
_ZN71BinarySearchTreeTest_findMax_throws_logic_error_when_tree_is_empty_TestD0Ev:
        1:   87:TEST_F(BinarySearchTreeTest, findMax_throws_logic_error_when_tree_is_empty) {
        1:   87-block  0
------------------
_ZN71BinarySearchTreeTest_findMax_throws_logic_error_when_tree_is_empty_TestD2Ev:
        1:   87:TEST_F(BinarySearchTreeTest, findMax_throws_logic_error_when_tree_is_empty) {
        1:   87-block  0
------------------
_ZN71BinarySearchTreeTest_findMax_throws_logic_error_when_tree_is_empty_Test8TestBodyEv:
        1:   87:TEST_F(BinarySearchTreeTest, findMax_throws_logic_error_when_tree_is_empty) {
        -:   88:
       2*:   89:	ASSERT_THROW(tree.findMax(), logic_error);
        1:   89-block  0
        1:   89-block  1
        1:   89-block  2
        1:   89-block  3
        1:   89-block  4
    %%%%%:   89-block  5
    %%%%%:   89-block  6
    %%%%%:   89-block  7
    %%%%%:   89-block  8
    %%%%%:   89-block  9
    %%%%%:   89-block 10
        1:   89-block 11
    $$$$$:   89-block 12
    $$$$$:   89-block 13
    $$$$$:   89-block 14
    $$$$$:   89-block 15
    $$$$$:   89-block 16
    $$$$$:   89-block 17
    $$$$$:   89-block 18
    $$$$$:   89-block 19
    $$$$$:   89-block 20
    $$$$$:   89-block 21
    $$$$$:   89-block 22
    $$$$$:   89-block 23
    $$$$$:   89-block 24
    $$$$$:   89-block 25
    $$$$$:   89-block 26
    $$$$$:   89-block 27
    $$$$$:   89-block 28
    $$$$$:   89-block 29
        -:   90:}
------------------
        -:   91:
        4:   92:TEST_F(BinarySearchTreeTest, findMax_returns_maximum_value_when_value_is_present) {
        -:   93:
        1:   94:	auto expectedMax = RandomValues::getRandomNumber<size_t>();
        1:   95:	tree.insert(expectedMax);
        -:   96:
        1:   97:	auto max = tree.findMax();
        -:   98:
       1*:   99:	ASSERT_EQ(expectedMax, max);
        -:  100:}
------------------
_ZN77BinarySearchTreeTest_findMax_returns_maximum_value_when_value_is_present_TestC2Ev:
        1:   92:TEST_F(BinarySearchTreeTest, findMax_returns_maximum_value_when_value_is_present) {
        1:   92-block  0
------------------
_ZN77BinarySearchTreeTest_findMax_returns_maximum_value_when_value_is_present_TestD0Ev:
        1:   92:TEST_F(BinarySearchTreeTest, findMax_returns_maximum_value_when_value_is_present) {
        1:   92-block  0
------------------
_ZN77BinarySearchTreeTest_findMax_returns_maximum_value_when_value_is_present_TestD2Ev:
        1:   92:TEST_F(BinarySearchTreeTest, findMax_returns_maximum_value_when_value_is_present) {
        1:   92-block  0
------------------
_ZN77BinarySearchTreeTest_findMax_returns_maximum_value_when_value_is_present_Test8TestBodyEv:
        1:   92:TEST_F(BinarySearchTreeTest, findMax_returns_maximum_value_when_value_is_present) {
        -:   93:
        1:   94:	auto expectedMax = RandomValues::getRandomNumber<size_t>();
        1:   94-block  0
        1:   95:	tree.insert(expectedMax);
        -:   96:
        1:   97:	auto max = tree.findMax();
        1:   97-block  0
        -:   98:
       1*:   99:	ASSERT_EQ(expectedMax, max);
        1:   99-block  0
        1:   99-block  1
    %%%%%:   99-block  2
    %%%%%:   99-block  3
    %%%%%:   99-block  4
    %%%%%:   99-block  5
    $$$$$:   99-block  6
    $$$$$:   99-block  7
    $$$$$:   99-block  8
    $$$$$:   99-block  9
    $$$$$:   99-block 10
        -:  100:}
------------------
        -:  101:
        4:  102:TEST_F(BinarySearchTreeTest, findMax_returns_maximum_value_when_value_is_present_in_complex_tree) {
        -:  103:
        1:  104:	auto randomValue = RandomValues::getRandomNumber<size_t>();
        1:  105:	auto expectedMax = randomValue + 2;
        1:  106:	tree.insert(randomValue - 2);
        1:  107:	tree.insert(randomValue - 1);
        1:  108:	tree.insert(expectedMax);
        1:  109:	tree.insert(randomValue);
        1:  110:	tree.insert(randomValue + 1);
        -:  111:
        1:  112:	auto max = tree.findMax();
        -:  113:
       1*:  114:	ASSERT_EQ(expectedMax, max);
        -:  115:}
------------------
_ZN93BinarySearchTreeTest_findMax_returns_maximum_value_when_value_is_present_in_complex_tree_TestC2Ev:
        1:  102:TEST_F(BinarySearchTreeTest, findMax_returns_maximum_value_when_value_is_present_in_complex_tree) {
        1:  102-block  0
------------------
_ZN93BinarySearchTreeTest_findMax_returns_maximum_value_when_value_is_present_in_complex_tree_TestD0Ev:
        1:  102:TEST_F(BinarySearchTreeTest, findMax_returns_maximum_value_when_value_is_present_in_complex_tree) {
        1:  102-block  0
------------------
_ZN93BinarySearchTreeTest_findMax_returns_maximum_value_when_value_is_present_in_complex_tree_TestD2Ev:
        1:  102:TEST_F(BinarySearchTreeTest, findMax_returns_maximum_value_when_value_is_present_in_complex_tree) {
        1:  102-block  0
------------------
_ZN93BinarySearchTreeTest_findMax_returns_maximum_value_when_value_is_present_in_complex_tree_Test8TestBodyEv:
        1:  102:TEST_F(BinarySearchTreeTest, findMax_returns_maximum_value_when_value_is_present_in_complex_tree) {
        -:  103:
        1:  104:	auto randomValue = RandomValues::getRandomNumber<size_t>();
        1:  104-block  0
        1:  105:	auto expectedMax = randomValue + 2;
        1:  106:	tree.insert(randomValue - 2);
    $$$$$:  106-block  0
        1:  107:	tree.insert(randomValue - 1);
        1:  107-block  0
    $$$$$:  107-block  1
        1:  108:	tree.insert(expectedMax);
        1:  108-block  0
        1:  109:	tree.insert(randomValue);
        1:  109-block  0
        1:  110:	tree.insert(randomValue + 1);
        1:  110-block  0
    $$$$$:  110-block  1
        -:  111:
        1:  112:	auto max = tree.findMax();
        1:  112-block  0
        -:  113:
       1*:  114:	ASSERT_EQ(expectedMax, max);
        1:  114-block  0
        1:  114-block  1
    %%%%%:  114-block  2
    %%%%%:  114-block  3
    %%%%%:  114-block  4
    %%%%%:  114-block  5
    $$$$$:  114-block  6
    $$$$$:  114-block  7
    $$$$$:  114-block  8
    $$$$$:  114-block  9
    $$$$$:  114-block 10
        -:  115:}
------------------
        -:  116:
        4:  117:TEST_F(BinarySearchTreeTest, trying_to_remove_element_of_empty_tree_does_not_crash) {
        -:  118:
       1*:  119:	ASSERT_NO_THROW(tree.remove(RandomValues::getRandomNumber<size_t>()));
        -:  120:}
------------------
_ZN79BinarySearchTreeTest_trying_to_remove_element_of_empty_tree_does_not_crash_TestC2Ev:
        1:  117:TEST_F(BinarySearchTreeTest, trying_to_remove_element_of_empty_tree_does_not_crash) {
        1:  117-block  0
------------------
_ZN79BinarySearchTreeTest_trying_to_remove_element_of_empty_tree_does_not_crash_TestD0Ev:
        1:  117:TEST_F(BinarySearchTreeTest, trying_to_remove_element_of_empty_tree_does_not_crash) {
        1:  117-block  0
------------------
_ZN79BinarySearchTreeTest_trying_to_remove_element_of_empty_tree_does_not_crash_TestD2Ev:
        1:  117:TEST_F(BinarySearchTreeTest, trying_to_remove_element_of_empty_tree_does_not_crash) {
        1:  117-block  0
------------------
_ZN79BinarySearchTreeTest_trying_to_remove_element_of_empty_tree_does_not_crash_Test8TestBodyEv:
        1:  117:TEST_F(BinarySearchTreeTest, trying_to_remove_element_of_empty_tree_does_not_crash) {
        -:  118:
       1*:  119:	ASSERT_NO_THROW(tree.remove(RandomValues::getRandomNumber<size_t>()));
        1:  119-block  0
        1:  119-block  1
        1:  119-block  2
        1:  119-block  3
        1:  119-block  4
    %%%%%:  119-block  5
    %%%%%:  119-block  6
    %%%%%:  119-block  7
    %%%%%:  119-block  8
    %%%%%:  119-block  9
    $$$$$:  119-block 10
    $$$$$:  119-block 11
    $$$$$:  119-block 12
    $$$$$:  119-block 13
    $$$$$:  119-block 14
    $$$$$:  119-block 15
    $$$$$:  119-block 16
    $$$$$:  119-block 17
    $$$$$:  119-block 18
    $$$$$:  119-block 19
    $$$$$:  119-block 20
    $$$$$:  119-block 21
    $$$$$:  119-block 22
    $$$$$:  119-block 23
    $$$$$:  119-block 24
    $$$$$:  119-block 25
    $$$$$:  119-block 26
    $$$$$:  119-block 27
    $$$$$:  119-block 28
    $$$$$:  119-block 29
    $$$$$:  119-block 30
        -:  120:}
------------------
        -:  121:
        4:  122:TEST_F(BinarySearchTreeTest, removes_value_from_tree) {
        -:  123:
        1:  124:	auto expectedValue = RandomValues::getRandomNumber<size_t>();
        1:  125:	tree.insert(expectedValue);
        -:  126:
        1:  127:	tree.remove(expectedValue);
        -:  128:
       1*:  129:	ASSERT_FALSE(tree.contains(expectedValue));
        -:  130:}
------------------
_ZN49BinarySearchTreeTest_removes_value_from_tree_TestC2Ev:
        1:  122:TEST_F(BinarySearchTreeTest, removes_value_from_tree) {
        1:  122-block  0
------------------
_ZN49BinarySearchTreeTest_removes_value_from_tree_TestD0Ev:
        1:  122:TEST_F(BinarySearchTreeTest, removes_value_from_tree) {
        1:  122-block  0
------------------
_ZN49BinarySearchTreeTest_removes_value_from_tree_TestD2Ev:
        1:  122:TEST_F(BinarySearchTreeTest, removes_value_from_tree) {
        1:  122-block  0
------------------
_ZN49BinarySearchTreeTest_removes_value_from_tree_Test8TestBodyEv:
        1:  122:TEST_F(BinarySearchTreeTest, removes_value_from_tree) {
        -:  123:
        1:  124:	auto expectedValue = RandomValues::getRandomNumber<size_t>();
        1:  124-block  0
        1:  125:	tree.insert(expectedValue);
        -:  126:
        1:  127:	tree.remove(expectedValue);
        1:  127-block  0
        -:  128:
       1*:  129:	ASSERT_FALSE(tree.contains(expectedValue));
        1:  129-block  0
        1:  129-block  1
    %%%%%:  129-block  2
    %%%%%:  129-block  3
    %%%%%:  129-block  4
    %%%%%:  129-block  5
    %%%%%:  129-block  6
    $$$$$:  129-block  7
    $$$$$:  129-block  8
    $$$$$:  129-block  9
    $$$$$:  129-block 10
    $$$$$:  129-block 11
    $$$$$:  129-block 12
    $$$$$:  129-block 13
        -:  130:}
------------------
        -:  131:
        4:  132:TEST_F(BinarySearchTreeTest, removes_value_from_complex_tree_without_removing_other_values) {
        -:  133:
        1:  134:	auto value1 = RandomValues::getRandomNumber<size_t>();
        1:  135:	auto value2 = RandomValues::getRandomNumber<size_t>();
        1:  136:	auto value3 = RandomValues::getRandomNumber<size_t>();
        1:  137:	auto value4 = RandomValues::getRandomNumber<size_t>();
        1:  138:	auto value5 = RandomValues::getRandomNumber<size_t>();
        1:  139:	tree.insert(value1);
        1:  140:	tree.insert(value3);
        1:  141:	tree.insert(value5);
        1:  142:	tree.insert(value2);
        1:  143:	tree.insert(value4);
        -:  144:
        1:  145:	tree.remove(value2);
        -:  146:
       1*:  147:	ASSERT_FALSE(tree.contains(value2));
       1*:  148:	ASSERT_TRUE(tree.contains(value1));
       1*:  149:	ASSERT_TRUE(tree.contains(value3));
       1*:  150:	ASSERT_TRUE(tree.contains(value4));
       1*:  151:	ASSERT_TRUE(tree.contains(value5));
        -:  152:}
------------------
_ZN87BinarySearchTreeTest_removes_value_from_complex_tree_without_removing_other_values_TestC2Ev:
        1:  132:TEST_F(BinarySearchTreeTest, removes_value_from_complex_tree_without_removing_other_values) {
        1:  132-block  0
------------------
_ZN87BinarySearchTreeTest_removes_value_from_complex_tree_without_removing_other_values_TestD0Ev:
        1:  132:TEST_F(BinarySearchTreeTest, removes_value_from_complex_tree_without_removing_other_values) {
        1:  132-block  0
------------------
_ZN87BinarySearchTreeTest_removes_value_from_complex_tree_without_removing_other_values_TestD2Ev:
        1:  132:TEST_F(BinarySearchTreeTest, removes_value_from_complex_tree_without_removing_other_values) {
        1:  132-block  0
------------------
_ZN87BinarySearchTreeTest_removes_value_from_complex_tree_without_removing_other_values_Test8TestBodyEv:
        1:  132:TEST_F(BinarySearchTreeTest, removes_value_from_complex_tree_without_removing_other_values) {
        -:  133:
        1:  134:	auto value1 = RandomValues::getRandomNumber<size_t>();
        1:  134-block  0
        1:  135:	auto value2 = RandomValues::getRandomNumber<size_t>();
        1:  136:	auto value3 = RandomValues::getRandomNumber<size_t>();
        1:  137:	auto value4 = RandomValues::getRandomNumber<size_t>();
        1:  138:	auto value5 = RandomValues::getRandomNumber<size_t>();
        1:  139:	tree.insert(value1);
        1:  140:	tree.insert(value3);
        1:  140-block  0
        1:  141:	tree.insert(value5);
        1:  141-block  0
        1:  142:	tree.insert(value2);
        1:  142-block  0
        1:  143:	tree.insert(value4);
        1:  143-block  0
        -:  144:
        1:  145:	tree.remove(value2);
        1:  145-block  0
        -:  146:
       1*:  147:	ASSERT_FALSE(tree.contains(value2));
        1:  147-block  0
        1:  147-block  1
    %%%%%:  147-block  2
    %%%%%:  147-block  3
    %%%%%:  147-block  4
    %%%%%:  147-block  5
    %%%%%:  147-block  6
    $$$$$:  147-block  7
    $$$$$:  147-block  8
    $$$$$:  147-block  9
    $$$$$:  147-block 10
    $$$$$:  147-block 11
    $$$$$:  147-block 12
    $$$$$:  147-block 13
       1*:  148:	ASSERT_TRUE(tree.contains(value1));
        1:  148-block  0
        1:  148-block  1
    %%%%%:  148-block  2
    %%%%%:  148-block  3
    %%%%%:  148-block  4
    %%%%%:  148-block  5
    %%%%%:  148-block  6
    $$$$$:  148-block  7
    $$$$$:  148-block  8
    $$$$$:  148-block  9
    $$$$$:  148-block 10
    $$$$$:  148-block 11
    $$$$$:  148-block 12
    $$$$$:  148-block 13
       1*:  149:	ASSERT_TRUE(tree.contains(value3));
        1:  149-block  0
        1:  149-block  1
    %%%%%:  149-block  2
    %%%%%:  149-block  3
    %%%%%:  149-block  4
    %%%%%:  149-block  5
    %%%%%:  149-block  6
    $$$$$:  149-block  7
    $$$$$:  149-block  8
    $$$$$:  149-block  9
    $$$$$:  149-block 10
    $$$$$:  149-block 11
    $$$$$:  149-block 12
    $$$$$:  149-block 13
       1*:  150:	ASSERT_TRUE(tree.contains(value4));
        1:  150-block  0
        1:  150-block  1
    %%%%%:  150-block  2
    %%%%%:  150-block  3
    %%%%%:  150-block  4
    %%%%%:  150-block  5
    %%%%%:  150-block  6
    $$$$$:  150-block  7
    $$$$$:  150-block  8
    $$$$$:  150-block  9
    $$$$$:  150-block 10
    $$$$$:  150-block 11
    $$$$$:  150-block 12
    $$$$$:  150-block 13
       1*:  151:	ASSERT_TRUE(tree.contains(value5));
        1:  151-block  0
        1:  151-block  1
    %%%%%:  151-block  2
    %%%%%:  151-block  3
    %%%%%:  151-block  4
    %%%%%:  151-block  5
    %%%%%:  151-block  6
    $$$$$:  151-block  7
    $$$$$:  151-block  8
    $$$$$:  151-block  9
    $$$$$:  151-block 10
    $$$$$:  151-block 11
    $$$$$:  151-block 12
    $$$$$:  151-block 13
        -:  152:}
------------------
        -:  153:
        4:  154:TEST_F(BinarySearchTreeTest, can_remove_value_when_value_is_not_the_smallest_value) {
        -:  155:
        1:  156:	auto smallerValue = size_t{1};
        1:  157:	auto expectedValueToRemove = size_t{2};
        1:  158:	tree.insert(smallerValue);
        1:  159:	tree.insert(expectedValueToRemove);
        -:  160:
        1:  161:	tree.remove(expectedValueToRemove);
        -:  162:
       1*:  163:	ASSERT_FALSE(tree.contains(expectedValueToRemove));
       1*:  164:	ASSERT_TRUE(tree.contains(smallerValue));
        -:  165:}
------------------
_ZN79BinarySearchTreeTest_can_remove_value_when_value_is_not_the_smallest_value_TestC2Ev:
        1:  154:TEST_F(BinarySearchTreeTest, can_remove_value_when_value_is_not_the_smallest_value) {
        1:  154-block  0
------------------
_ZN79BinarySearchTreeTest_can_remove_value_when_value_is_not_the_smallest_value_TestD0Ev:
        1:  154:TEST_F(BinarySearchTreeTest, can_remove_value_when_value_is_not_the_smallest_value) {
        1:  154-block  0
------------------
_ZN79BinarySearchTreeTest_can_remove_value_when_value_is_not_the_smallest_value_TestD2Ev:
        1:  154:TEST_F(BinarySearchTreeTest, can_remove_value_when_value_is_not_the_smallest_value) {
        1:  154-block  0
------------------
_ZN79BinarySearchTreeTest_can_remove_value_when_value_is_not_the_smallest_value_Test8TestBodyEv:
        1:  154:TEST_F(BinarySearchTreeTest, can_remove_value_when_value_is_not_the_smallest_value) {
        -:  155:
        1:  156:	auto smallerValue = size_t{1};
        1:  157:	auto expectedValueToRemove = size_t{2};
        1:  158:	tree.insert(smallerValue);
        1:  158-block  0
        1:  159:	tree.insert(expectedValueToRemove);
        1:  159-block  0
        -:  160:
        1:  161:	tree.remove(expectedValueToRemove);
        1:  161-block  0
        -:  162:
       1*:  163:	ASSERT_FALSE(tree.contains(expectedValueToRemove));
        1:  163-block  0
        1:  163-block  1
    %%%%%:  163-block  2
    %%%%%:  163-block  3
    %%%%%:  163-block  4
    %%%%%:  163-block  5
    %%%%%:  163-block  6
    $$$$$:  163-block  7
    $$$$$:  163-block  8
    $$$$$:  163-block  9
    $$$$$:  163-block 10
    $$$$$:  163-block 11
    $$$$$:  163-block 12
    $$$$$:  163-block 13
       1*:  164:	ASSERT_TRUE(tree.contains(smallerValue));
        1:  164-block  0
        1:  164-block  1
    %%%%%:  164-block  2
    %%%%%:  164-block  3
    %%%%%:  164-block  4
    %%%%%:  164-block  5
    %%%%%:  164-block  6
    $$$$$:  164-block  7
    $$$$$:  164-block  8
    $$$$$:  164-block  9
    $$$$$:  164-block 10
    $$$$$:  164-block 11
    $$$$$:  164-block 12
    $$$$$:  164-block 13
        -:  165:}
------------------
        -:  166:
        4:  167:TEST_F(BinarySearchTreeTest, can_remove_value_when_value_is_the_smallest_value) {
        -:  168:
        1:  169:	auto biggerValue = size_t{2};
        1:  170:	auto expectedValueToRemove = size_t{1};
        1:  171:	tree.insert(biggerValue);
        1:  172:	tree.insert(expectedValueToRemove);
        -:  173:
        1:  174:	tree.remove(expectedValueToRemove);
        -:  175:
       1*:  176:	ASSERT_FALSE(tree.contains(expectedValueToRemove));
       1*:  177:	ASSERT_TRUE(tree.contains(biggerValue));
        -:  178:}
------------------
_ZN75BinarySearchTreeTest_can_remove_value_when_value_is_the_smallest_value_TestC2Ev:
        1:  167:TEST_F(BinarySearchTreeTest, can_remove_value_when_value_is_the_smallest_value) {
        1:  167-block  0
------------------
_ZN75BinarySearchTreeTest_can_remove_value_when_value_is_the_smallest_value_TestD0Ev:
        1:  167:TEST_F(BinarySearchTreeTest, can_remove_value_when_value_is_the_smallest_value) {
        1:  167-block  0
------------------
_ZN75BinarySearchTreeTest_can_remove_value_when_value_is_the_smallest_value_TestD2Ev:
        1:  167:TEST_F(BinarySearchTreeTest, can_remove_value_when_value_is_the_smallest_value) {
        1:  167-block  0
------------------
_ZN75BinarySearchTreeTest_can_remove_value_when_value_is_the_smallest_value_Test8TestBodyEv:
        1:  167:TEST_F(BinarySearchTreeTest, can_remove_value_when_value_is_the_smallest_value) {
        -:  168:
        1:  169:	auto biggerValue = size_t{2};
        1:  170:	auto expectedValueToRemove = size_t{1};
        1:  171:	tree.insert(biggerValue);
        1:  171-block  0
        1:  172:	tree.insert(expectedValueToRemove);
        1:  172-block  0
        -:  173:
        1:  174:	tree.remove(expectedValueToRemove);
        1:  174-block  0
        -:  175:
       1*:  176:	ASSERT_FALSE(tree.contains(expectedValueToRemove));
        1:  176-block  0
        1:  176-block  1
    %%%%%:  176-block  2
    %%%%%:  176-block  3
    %%%%%:  176-block  4
    %%%%%:  176-block  5
    %%%%%:  176-block  6
    $$$$$:  176-block  7
    $$$$$:  176-block  8
    $$$$$:  176-block  9
    $$$$$:  176-block 10
    $$$$$:  176-block 11
    $$$$$:  176-block 12
    $$$$$:  176-block 13
       1*:  177:	ASSERT_TRUE(tree.contains(biggerValue));
        1:  177-block  0
        1:  177-block  1
    %%%%%:  177-block  2
    %%%%%:  177-block  3
    %%%%%:  177-block  4
    %%%%%:  177-block  5
    %%%%%:  177-block  6
    $$$$$:  177-block  7
    $$$$$:  177-block  8
    $$$$$:  177-block  9
    $$$$$:  177-block 10
    $$$$$:  177-block 11
    $$$$$:  177-block 12
    $$$$$:  177-block 13
        -:  178:}
------------------
        -:  179:
        4:  180:TEST_F(BinarySearchTreeTest, can_remove_value_when_value_has_two_children) {
        -:  181:
        1:  182:	auto valueToRemove = size_t{2};
        1:  183:	auto leftChild = size_t{valueToRemove - 1};
        1:  184:	auto rightChild = size_t{valueToRemove + 1};
        1:  185:	tree.insert(valueToRemove);
        1:  186:	tree.insert(leftChild);
        1:  187:	tree.insert(rightChild);
        -:  188:
        1:  189:	tree.remove(valueToRemove);
        -:  190:
       1*:  191:	ASSERT_FALSE(tree.contains(valueToRemove));
       1*:  192:	ASSERT_TRUE(tree.contains(leftChild));
       1*:  193:	ASSERT_TRUE(tree.contains(rightChild));
        -:  194:}
------------------
_ZN70BinarySearchTreeTest_can_remove_value_when_value_has_two_children_TestC2Ev:
        1:  180:TEST_F(BinarySearchTreeTest, can_remove_value_when_value_has_two_children) {
        1:  180-block  0
------------------
_ZN70BinarySearchTreeTest_can_remove_value_when_value_has_two_children_TestD0Ev:
        1:  180:TEST_F(BinarySearchTreeTest, can_remove_value_when_value_has_two_children) {
        1:  180-block  0
------------------
_ZN70BinarySearchTreeTest_can_remove_value_when_value_has_two_children_TestD2Ev:
        1:  180:TEST_F(BinarySearchTreeTest, can_remove_value_when_value_has_two_children) {
        1:  180-block  0
------------------
_ZN70BinarySearchTreeTest_can_remove_value_when_value_has_two_children_Test8TestBodyEv:
        1:  180:TEST_F(BinarySearchTreeTest, can_remove_value_when_value_has_two_children) {
        -:  181:
        1:  182:	auto valueToRemove = size_t{2};
        1:  183:	auto leftChild = size_t{valueToRemove - 1};
        1:  184:	auto rightChild = size_t{valueToRemove + 1};
        1:  185:	tree.insert(valueToRemove);
        1:  185-block  0
        1:  186:	tree.insert(leftChild);
        1:  186-block  0
        1:  187:	tree.insert(rightChild);
        1:  187-block  0
        -:  188:
        1:  189:	tree.remove(valueToRemove);
        1:  189-block  0
        -:  190:
       1*:  191:	ASSERT_FALSE(tree.contains(valueToRemove));
        1:  191-block  0
        1:  191-block  1
    %%%%%:  191-block  2
    %%%%%:  191-block  3
    %%%%%:  191-block  4
    %%%%%:  191-block  5
    %%%%%:  191-block  6
    $$$$$:  191-block  7
    $$$$$:  191-block  8
    $$$$$:  191-block  9
    $$$$$:  191-block 10
    $$$$$:  191-block 11
    $$$$$:  191-block 12
    $$$$$:  191-block 13
       1*:  192:	ASSERT_TRUE(tree.contains(leftChild));
        1:  192-block  0
        1:  192-block  1
    %%%%%:  192-block  2
    %%%%%:  192-block  3
    %%%%%:  192-block  4
    %%%%%:  192-block  5
    %%%%%:  192-block  6
    $$$$$:  192-block  7
    $$$$$:  192-block  8
    $$$$$:  192-block  9
    $$$$$:  192-block 10
    $$$$$:  192-block 11
    $$$$$:  192-block 12
    $$$$$:  192-block 13
       1*:  193:	ASSERT_TRUE(tree.contains(rightChild));
        1:  193-block  0
        1:  193-block  1
    %%%%%:  193-block  2
    %%%%%:  193-block  3
    %%%%%:  193-block  4
    %%%%%:  193-block  5
    %%%%%:  193-block  6
    $$$$$:  193-block  7
    $$$$$:  193-block  8
    $$$$$:  193-block  9
    $$$$$:  193-block 10
    $$$$$:  193-block 11
    $$$$$:  193-block 12
    $$$$$:  193-block 13
        -:  194:}
------------------
        -:  195:
        4:  196:TEST_F(BinarySearchTreeTest, isEmpty_returns_true_when_tree_is_empty) {
        -:  197:
       1*:  198:	ASSERT_TRUE(tree.isEmpty());
        -:  199:}
------------------
_ZN65BinarySearchTreeTest_isEmpty_returns_true_when_tree_is_empty_TestC2Ev:
        1:  196:TEST_F(BinarySearchTreeTest, isEmpty_returns_true_when_tree_is_empty) {
        1:  196-block  0
------------------
_ZN65BinarySearchTreeTest_isEmpty_returns_true_when_tree_is_empty_TestD0Ev:
        1:  196:TEST_F(BinarySearchTreeTest, isEmpty_returns_true_when_tree_is_empty) {
        1:  196-block  0
------------------
_ZN65BinarySearchTreeTest_isEmpty_returns_true_when_tree_is_empty_TestD2Ev:
        1:  196:TEST_F(BinarySearchTreeTest, isEmpty_returns_true_when_tree_is_empty) {
        1:  196-block  0
------------------
_ZN65BinarySearchTreeTest_isEmpty_returns_true_when_tree_is_empty_Test8TestBodyEv:
        1:  196:TEST_F(BinarySearchTreeTest, isEmpty_returns_true_when_tree_is_empty) {
        -:  197:
       1*:  198:	ASSERT_TRUE(tree.isEmpty());
        1:  198-block  0
    %%%%%:  198-block  1
    %%%%%:  198-block  2
    %%%%%:  198-block  3
    %%%%%:  198-block  4
    %%%%%:  198-block  5
    $$$$$:  198-block  6
    $$$$$:  198-block  7
    $$$$$:  198-block  8
    $$$$$:  198-block  9
    $$$$$:  198-block 10
    $$$$$:  198-block 11
    $$$$$:  198-block 12
        -:  199:}
------------------
        -:  200:
        4:  201:TEST_F(BinarySearchTreeTest, isEmpty_returns_true_when_tree_is_empty_after_remove) {
        -:  202:
        1:  203:	auto element = RandomValues::getRandomNumber<size_t>();
        1:  204:	tree.insert(element);
        -:  205:
        1:  206:	tree.remove(element);
        -:  207:
       1*:  208:	ASSERT_TRUE(tree.isEmpty());
        -:  209:}
------------------
_ZN78BinarySearchTreeTest_isEmpty_returns_true_when_tree_is_empty_after_remove_TestC2Ev:
        1:  201:TEST_F(BinarySearchTreeTest, isEmpty_returns_true_when_tree_is_empty_after_remove) {
        1:  201-block  0
------------------
_ZN78BinarySearchTreeTest_isEmpty_returns_true_when_tree_is_empty_after_remove_TestD0Ev:
        1:  201:TEST_F(BinarySearchTreeTest, isEmpty_returns_true_when_tree_is_empty_after_remove) {
        1:  201-block  0
------------------
_ZN78BinarySearchTreeTest_isEmpty_returns_true_when_tree_is_empty_after_remove_TestD2Ev:
        1:  201:TEST_F(BinarySearchTreeTest, isEmpty_returns_true_when_tree_is_empty_after_remove) {
        1:  201-block  0
------------------
_ZN78BinarySearchTreeTest_isEmpty_returns_true_when_tree_is_empty_after_remove_Test8TestBodyEv:
        1:  201:TEST_F(BinarySearchTreeTest, isEmpty_returns_true_when_tree_is_empty_after_remove) {
        -:  202:
        1:  203:	auto element = RandomValues::getRandomNumber<size_t>();
        1:  203-block  0
        1:  204:	tree.insert(element);
        -:  205:
        1:  206:	tree.remove(element);
        1:  206-block  0
        -:  207:
       1*:  208:	ASSERT_TRUE(tree.isEmpty());
        1:  208-block  0
    %%%%%:  208-block  1
    %%%%%:  208-block  2
    %%%%%:  208-block  3
    %%%%%:  208-block  4
    %%%%%:  208-block  5
    $$$$$:  208-block  6
    $$$$$:  208-block  7
    $$$$$:  208-block  8
    $$$$$:  208-block  9
    $$$$$:  208-block 10
    $$$$$:  208-block 11
    $$$$$:  208-block 12
        -:  209:}
------------------
        -:  210:
        4:  211:TEST_F(BinarySearchTreeTest, isEmpty_returns_false_when_tree_still_contains_elements) {
        -:  212:
        1:  213:	auto element1 = RandomValues::getRandomNumber<size_t>();
        1:  214:	auto element2 = RandomValues::getRandomNumber<size_t>();
        1:  215:	tree.insert(element1);
        1:  216:	tree.insert(element2);
        -:  217:
        1:  218:	tree.remove(element1);
        -:  219:
       1*:  220:	ASSERT_FALSE(tree.isEmpty());
        -:  221:}
------------------
_ZN81BinarySearchTreeTest_isEmpty_returns_false_when_tree_still_contains_elements_TestC2Ev:
        1:  211:TEST_F(BinarySearchTreeTest, isEmpty_returns_false_when_tree_still_contains_elements) {
        1:  211-block  0
------------------
_ZN81BinarySearchTreeTest_isEmpty_returns_false_when_tree_still_contains_elements_TestD0Ev:
        1:  211:TEST_F(BinarySearchTreeTest, isEmpty_returns_false_when_tree_still_contains_elements) {
        1:  211-block  0
------------------
_ZN81BinarySearchTreeTest_isEmpty_returns_false_when_tree_still_contains_elements_TestD2Ev:
        1:  211:TEST_F(BinarySearchTreeTest, isEmpty_returns_false_when_tree_still_contains_elements) {
        1:  211-block  0
------------------
_ZN81BinarySearchTreeTest_isEmpty_returns_false_when_tree_still_contains_elements_Test8TestBodyEv:
        1:  211:TEST_F(BinarySearchTreeTest, isEmpty_returns_false_when_tree_still_contains_elements) {
        -:  212:
        1:  213:	auto element1 = RandomValues::getRandomNumber<size_t>();
        1:  213-block  0
        1:  214:	auto element2 = RandomValues::getRandomNumber<size_t>();
        1:  215:	tree.insert(element1);
        1:  216:	tree.insert(element2);
        1:  216-block  0
        -:  217:
        1:  218:	tree.remove(element1);
        1:  218-block  0
        -:  219:
       1*:  220:	ASSERT_FALSE(tree.isEmpty());
        1:  220-block  0
    %%%%%:  220-block  1
    %%%%%:  220-block  2
    %%%%%:  220-block  3
    %%%%%:  220-block  4
    %%%%%:  220-block  5
    $$$$$:  220-block  6
    $$$$$:  220-block  7
    $$$$$:  220-block  8
    $$$$$:  220-block  9
    $$$$$:  220-block 10
    $$$$$:  220-block 11
    $$$$$:  220-block 12
        -:  221:}
------------------
        -:  222:
        4:  223:TEST_F(BinarySearchTreeTest, makeEmpty_removes_all_elements) {
        -:  224:
        1:  225:	auto element1 = RandomValues::getRandomNumber<size_t>();
        1:  226:	auto element2 = RandomValues::getRandomNumber<size_t>();
        1:  227:	tree.insert(element1);
        1:  228:	tree.insert(element2);
        -:  229:
        1:  230:	tree.makeEmpty();
        -:  231:
       1*:  232:	ASSERT_TRUE(tree.isEmpty());
        -:  233:}
------------------
_ZN56BinarySearchTreeTest_makeEmpty_removes_all_elements_TestC2Ev:
        1:  223:TEST_F(BinarySearchTreeTest, makeEmpty_removes_all_elements) {
        1:  223-block  0
------------------
_ZN56BinarySearchTreeTest_makeEmpty_removes_all_elements_TestD0Ev:
        1:  223:TEST_F(BinarySearchTreeTest, makeEmpty_removes_all_elements) {
        1:  223-block  0
------------------
_ZN56BinarySearchTreeTest_makeEmpty_removes_all_elements_TestD2Ev:
        1:  223:TEST_F(BinarySearchTreeTest, makeEmpty_removes_all_elements) {
        1:  223-block  0
------------------
_ZN56BinarySearchTreeTest_makeEmpty_removes_all_elements_Test8TestBodyEv:
        1:  223:TEST_F(BinarySearchTreeTest, makeEmpty_removes_all_elements) {
        -:  224:
        1:  225:	auto element1 = RandomValues::getRandomNumber<size_t>();
        1:  225-block  0
        1:  226:	auto element2 = RandomValues::getRandomNumber<size_t>();
        1:  227:	tree.insert(element1);
        1:  228:	tree.insert(element2);
        1:  228-block  0
        -:  229:
        1:  230:	tree.makeEmpty();
        1:  230-block  0
        -:  231:
       1*:  232:	ASSERT_TRUE(tree.isEmpty());
        1:  232-block  0
    %%%%%:  232-block  1
    %%%%%:  232-block  2
    %%%%%:  232-block  3
    %%%%%:  232-block  4
    %%%%%:  232-block  5
    $$$$$:  232-block  6
    $$$$$:  232-block  7
    $$$$$:  232-block  8
    $$$$$:  232-block  9
    $$$$$:  232-block 10
    $$$$$:  232-block 11
    $$$$$:  232-block 12
        -:  233:}
------------------
        -:  234:
        4:  235:TEST_F(BinarySearchTreeTest, makeEmpty_has_no_effect_on_empty_tree) {
        -:  236:
        1:  237:	tree.makeEmpty();
        -:  238:
       1*:  239:	ASSERT_TRUE(tree.isEmpty());
        -:  240:}
------------------
_ZN63BinarySearchTreeTest_makeEmpty_has_no_effect_on_empty_tree_TestC2Ev:
        1:  235:TEST_F(BinarySearchTreeTest, makeEmpty_has_no_effect_on_empty_tree) {
        1:  235-block  0
------------------
_ZN63BinarySearchTreeTest_makeEmpty_has_no_effect_on_empty_tree_TestD0Ev:
        1:  235:TEST_F(BinarySearchTreeTest, makeEmpty_has_no_effect_on_empty_tree) {
        1:  235-block  0
------------------
_ZN63BinarySearchTreeTest_makeEmpty_has_no_effect_on_empty_tree_TestD2Ev:
        1:  235:TEST_F(BinarySearchTreeTest, makeEmpty_has_no_effect_on_empty_tree) {
        1:  235-block  0
------------------
_ZN63BinarySearchTreeTest_makeEmpty_has_no_effect_on_empty_tree_Test8TestBodyEv:
        1:  235:TEST_F(BinarySearchTreeTest, makeEmpty_has_no_effect_on_empty_tree) {
        -:  236:
        1:  237:	tree.makeEmpty();
        1:  237-block  0
        -:  238:
       1*:  239:	ASSERT_TRUE(tree.isEmpty());
    %%%%%:  239-block  0
    %%%%%:  239-block  1
    %%%%%:  239-block  2
    %%%%%:  239-block  3
    %%%%%:  239-block  4
    $$$$$:  239-block  5
    $$$$$:  239-block  6
    $$$$$:  239-block  7
    $$$$$:  239-block  8
    $$$$$:  239-block  9
    $$$$$:  239-block 10
    $$$$$:  239-block 11
        -:  240:}
------------------
        -:  241:
        4:  242:TEST_F(BinarySearchTreeTest, makeEmpty_is_idempotent) {
        -:  243:
        1:  244:	tree.makeEmpty();
        1:  245:	tree.makeEmpty();
        -:  246:
       1*:  247:	ASSERT_TRUE(tree.isEmpty());
        -:  248:}
------------------
_ZN49BinarySearchTreeTest_makeEmpty_is_idempotent_TestC2Ev:
        1:  242:TEST_F(BinarySearchTreeTest, makeEmpty_is_idempotent) {
        1:  242-block  0
------------------
_ZN49BinarySearchTreeTest_makeEmpty_is_idempotent_TestD0Ev:
        1:  242:TEST_F(BinarySearchTreeTest, makeEmpty_is_idempotent) {
        1:  242-block  0
------------------
_ZN49BinarySearchTreeTest_makeEmpty_is_idempotent_TestD2Ev:
        1:  242:TEST_F(BinarySearchTreeTest, makeEmpty_is_idempotent) {
        1:  242-block  0
------------------
_ZN49BinarySearchTreeTest_makeEmpty_is_idempotent_Test8TestBodyEv:
        1:  242:TEST_F(BinarySearchTreeTest, makeEmpty_is_idempotent) {
        -:  243:
        1:  244:	tree.makeEmpty();
        1:  244-block  0
        1:  245:	tree.makeEmpty();
        -:  246:
       1*:  247:	ASSERT_TRUE(tree.isEmpty());
    %%%%%:  247-block  0
    %%%%%:  247-block  1
    %%%%%:  247-block  2
    %%%%%:  247-block  3
    %%%%%:  247-block  4
    $$$$$:  247-block  5
    $$$$$:  247-block  6
    $$$$$:  247-block  7
    $$$$$:  247-block  8
    $$$$$:  247-block  9
    $$$$$:  247-block 10
    $$$$$:  247-block 11
        -:  248:}
------------------
        -:  249:
        4:  250:TEST_F(BinarySearchTreeTest, copy_constructor_copies_other_tree_content) {
        -:  251:
        1:  252:	auto treeExpectedElements = {
        1:  253:		RandomValues::getRandomNumber<int>(),
        1:  254:		RandomValues::getRandomNumber<int>(),
        1:  255:		RandomValues::getRandomNumber<int>(),
        1:  256:		RandomValues::getRandomNumber<int>()
        1:  257:	};
        1:  258:	auto tree1 = BinarySearchTree<int, BinaryNode<int>>{};
        5:  259:	for (const auto& element : treeExpectedElements) {
        4:  260:		tree1.insert(element);
        -:  261:	}
        -:  262:
        1:  263:	auto tree2 = tree1;
        -:  264:
        5:  265:	for (const auto& expectedElement: treeExpectedElements) {
       4*:  266:		ASSERT_TRUE(tree2.contains(expectedElement));
        -:  267:	}
        -:  268:}
------------------
_ZN68BinarySearchTreeTest_copy_constructor_copies_other_tree_content_TestC2Ev:
        1:  250:TEST_F(BinarySearchTreeTest, copy_constructor_copies_other_tree_content) {
        1:  250-block  0
------------------
_ZN68BinarySearchTreeTest_copy_constructor_copies_other_tree_content_TestD0Ev:
        1:  250:TEST_F(BinarySearchTreeTest, copy_constructor_copies_other_tree_content) {
        1:  250-block  0
------------------
_ZN68BinarySearchTreeTest_copy_constructor_copies_other_tree_content_TestD2Ev:
        1:  250:TEST_F(BinarySearchTreeTest, copy_constructor_copies_other_tree_content) {
        1:  250-block  0
------------------
_ZN68BinarySearchTreeTest_copy_constructor_copies_other_tree_content_Test8TestBodyEv:
        1:  250:TEST_F(BinarySearchTreeTest, copy_constructor_copies_other_tree_content) {
        -:  251:
        1:  252:	auto treeExpectedElements = {
        1:  253:		RandomValues::getRandomNumber<int>(),
        1:  253-block  0
        1:  254:		RandomValues::getRandomNumber<int>(),
        1:  255:		RandomValues::getRandomNumber<int>(),
        1:  256:		RandomValues::getRandomNumber<int>()
        1:  257:	};
        1:  258:	auto tree1 = BinarySearchTree<int, BinaryNode<int>>{};
    $$$$$:  258-block  0
        5:  259:	for (const auto& element : treeExpectedElements) {
        5:  259-block  0
        4:  259-block  1
        4:  260:		tree1.insert(element);
        4:  260-block  0
        -:  261:	}
        -:  262:
        1:  263:	auto tree2 = tree1;
        1:  263-block  0
    $$$$$:  263-block  1
        -:  264:
        5:  265:	for (const auto& expectedElement: treeExpectedElements) {
        1:  265-block  0
        5:  265-block  1
        4:  265-block  2
       4*:  266:		ASSERT_TRUE(tree2.contains(expectedElement));
        4:  266-block  0
        4:  266-block  1
    %%%%%:  266-block  2
    %%%%%:  266-block  3
    %%%%%:  266-block  4
    %%%%%:  266-block  5
    %%%%%:  266-block  6
    $$$$$:  266-block  7
    $$$$$:  266-block  8
    $$$$$:  266-block  9
    $$$$$:  266-block 10
    $$$$$:  266-block 11
    $$$$$:  266-block 12
    $$$$$:  266-block 13
        -:  267:	}
        -:  268:}
------------------
        -:  269:
        4:  270:TEST_F(BinarySearchTreeTest, assignment_operator_copies_other_tree_content) {
        -:  271:
        1:  272:	auto treeExpectedElements = {
        1:  273:		RandomValues::getRandomNumber<int>(),
        1:  274:		RandomValues::getRandomNumber<int>(),
        1:  275:		RandomValues::getRandomNumber<int>(),
        1:  276:		RandomValues::getRandomNumber<int>()
        1:  277:	};
        1:  278:	auto tree1 = BinarySearchTree<size_t, BinaryNode<size_t>>{};
        5:  279:	for (const auto& element : treeExpectedElements) {
        4:  280:		tree1.insert(element);
        -:  281:	}
        -:  282:
        1:  283:	tree = tree1;
        -:  284:
        5:  285:	for (const auto& expectedElement: treeExpectedElements) {
       4*:  286:		ASSERT_TRUE(tree.contains(expectedElement));
        -:  287:	}
        -:  288:}
------------------
_ZN71BinarySearchTreeTest_assignment_operator_copies_other_tree_content_TestC2Ev:
        1:  270:TEST_F(BinarySearchTreeTest, assignment_operator_copies_other_tree_content) {
        1:  270-block  0
------------------
_ZN71BinarySearchTreeTest_assignment_operator_copies_other_tree_content_TestD0Ev:
        1:  270:TEST_F(BinarySearchTreeTest, assignment_operator_copies_other_tree_content) {
        1:  270-block  0
------------------
_ZN71BinarySearchTreeTest_assignment_operator_copies_other_tree_content_TestD2Ev:
        1:  270:TEST_F(BinarySearchTreeTest, assignment_operator_copies_other_tree_content) {
        1:  270-block  0
------------------
_ZN71BinarySearchTreeTest_assignment_operator_copies_other_tree_content_Test8TestBodyEv:
        1:  270:TEST_F(BinarySearchTreeTest, assignment_operator_copies_other_tree_content) {
        -:  271:
        1:  272:	auto treeExpectedElements = {
        1:  273:		RandomValues::getRandomNumber<int>(),
        1:  273-block  0
        1:  274:		RandomValues::getRandomNumber<int>(),
        1:  275:		RandomValues::getRandomNumber<int>(),
        1:  276:		RandomValues::getRandomNumber<int>()
        1:  277:	};
        1:  278:	auto tree1 = BinarySearchTree<size_t, BinaryNode<size_t>>{};
    $$$$$:  278-block  0
        5:  279:	for (const auto& element : treeExpectedElements) {
        5:  279-block  0
        4:  280:		tree1.insert(element);
        4:  280-block  0
        4:  280-block  1
    $$$$$:  280-block  2
        -:  281:	}
        -:  282:
        1:  283:	tree = tree1;
        1:  283-block  0
        -:  284:
        5:  285:	for (const auto& expectedElement: treeExpectedElements) {
        1:  285-block  0
        5:  285-block  1
        4:  285-block  2
       4*:  286:		ASSERT_TRUE(tree.contains(expectedElement));
        4:  286-block  0
        4:  286-block  1
    %%%%%:  286-block  2
    %%%%%:  286-block  3
    %%%%%:  286-block  4
    %%%%%:  286-block  5
    %%%%%:  286-block  6
    $$$$$:  286-block  7
    $$$$$:  286-block  8
    $$$$$:  286-block  9
    $$$$$:  286-block 10
    $$$$$:  286-block 11
    $$$$$:  286-block 12
    $$$$$:  286-block 13
    $$$$$:  286-block 14
        -:  287:	}
        -:  288:}
------------------
        -:  289:
        4:  290:TEST_F(BinarySearchTreeTest,
        -:  291:       assignment_operator_removes_previously_inserted_element_before_copying_content_of_other_tree) {
        -:  292:
        1:  293:	auto expectedElement = RandomValues::getRandomNumber<size_t>();
        1:  294:	auto tree1 = BinarySearchTree<size_t, BinaryNode<size_t>>{};
        1:  295:	tree1.insert(expectedElement);
        1:  296:	auto unexpectedElement = RandomValues::getRandomNumber<size_t>();
        1:  297:	tree.insert(unexpectedElement);
        -:  298:
        1:  299:	tree = tree1;
        -:  300:
       1*:  301:	ASSERT_FALSE(tree.contains(unexpectedElement));
        -:  302:}
------------------
_ZN118BinarySearchTreeTest_assignment_operator_removes_previously_inserted_element_before_copying_content_of_other_tree_TestC2Ev:
        1:  290:TEST_F(BinarySearchTreeTest,
        1:  290-block  0
------------------
_ZN118BinarySearchTreeTest_assignment_operator_removes_previously_inserted_element_before_copying_content_of_other_tree_TestD0Ev:
        1:  290:TEST_F(BinarySearchTreeTest,
        1:  290-block  0
------------------
_ZN118BinarySearchTreeTest_assignment_operator_removes_previously_inserted_element_before_copying_content_of_other_tree_TestD2Ev:
        1:  290:TEST_F(BinarySearchTreeTest,
        1:  290-block  0
------------------
_ZN118BinarySearchTreeTest_assignment_operator_removes_previously_inserted_element_before_copying_content_of_other_tree_Test8TestBodyEv:
        1:  290:TEST_F(BinarySearchTreeTest,
        -:  291:       assignment_operator_removes_previously_inserted_element_before_copying_content_of_other_tree) {
        -:  292:
        1:  293:	auto expectedElement = RandomValues::getRandomNumber<size_t>();
        1:  293-block  0
        1:  294:	auto tree1 = BinarySearchTree<size_t, BinaryNode<size_t>>{};
    $$$$$:  294-block  0
        1:  295:	tree1.insert(expectedElement);
        1:  296:	auto unexpectedElement = RandomValues::getRandomNumber<size_t>();
        1:  296-block  0
        1:  297:	tree.insert(unexpectedElement);
        -:  298:
        1:  299:	tree = tree1;
        1:  299-block  0
        -:  300:
       1*:  301:	ASSERT_FALSE(tree.contains(unexpectedElement));
        1:  301-block  0
        1:  301-block  1
    %%%%%:  301-block  2
    %%%%%:  301-block  3
    %%%%%:  301-block  4
    %%%%%:  301-block  5
    %%%%%:  301-block  6
    $$$$$:  301-block  7
    $$$$$:  301-block  8
    $$$$$:  301-block  9
    $$$$$:  301-block 10
    $$$$$:  301-block 11
    $$$$$:  301-block 12
    $$$$$:  301-block 13
        -:  302:}
------------------
        -:  303:
        4:  304:TEST_F(BinarySearchTreeTest, prints_tree_in_symmetric_order) {
        -:  305:
        1:  306:	auto expectedNode1 = size_t{7};
        1:  307:	auto expectedNode2 = size_t{2};
        1:  308:	auto expectedNode3 = size_t{8};
        1:  309:	auto expectedNode4 = size_t{1};
        1:  310:	auto expectedNode5 = size_t{4};
        1:  311:	auto expectedNode6 = size_t{3};
        1:  312:	auto expectedNode7 = size_t{5};
        1:  313:	tree.insert(expectedNode1);
        1:  314:	tree.insert(expectedNode2);
        1:  315:	tree.insert(expectedNode3);
        1:  316:	tree.insert(expectedNode4);
        1:  317:	tree.insert(expectedNode5);
        1:  318:	tree.insert(expectedNode6);
        1:  319:	tree.insert(expectedNode7);
        -:  320:	auto expectedTreeInSymmetricOrder = BinarySearchTreeExpectations::getExpectedTreeOutputFormat({
        -:  321:		                                                                                              expectedNode4,
        -:  322:		                                                                                              expectedNode2,
        -:  323:		                                                                                              expectedNode6,
        -:  324:		                                                                                              expectedNode5,
        -:  325:		                                                                                              expectedNode7,
        -:  326:		                                                                                              expectedNode1,
        -:  327:		                                                                                              expectedNode3
        1:  328:	                                                                                              });
        1:  329:	std::ostringstream output;
        -:  330:
        1:  331:	tree.printTreeInSymmetricOrder(output);
        -:  332:
       2*:  333:	ASSERT_EQ(expectedTreeInSymmetricOrder, output.str());
        -:  334:}
------------------
_ZN56BinarySearchTreeTest_prints_tree_in_symmetric_order_TestC2Ev:
        1:  304:TEST_F(BinarySearchTreeTest, prints_tree_in_symmetric_order) {
        1:  304-block  0
------------------
_ZN56BinarySearchTreeTest_prints_tree_in_symmetric_order_TestD0Ev:
        1:  304:TEST_F(BinarySearchTreeTest, prints_tree_in_symmetric_order) {
        1:  304-block  0
------------------
_ZN56BinarySearchTreeTest_prints_tree_in_symmetric_order_TestD2Ev:
        1:  304:TEST_F(BinarySearchTreeTest, prints_tree_in_symmetric_order) {
        1:  304-block  0
------------------
_ZN56BinarySearchTreeTest_prints_tree_in_symmetric_order_Test8TestBodyEv:
        1:  304:TEST_F(BinarySearchTreeTest, prints_tree_in_symmetric_order) {
        -:  305:
        1:  306:	auto expectedNode1 = size_t{7};
        1:  307:	auto expectedNode2 = size_t{2};
        1:  308:	auto expectedNode3 = size_t{8};
        1:  309:	auto expectedNode4 = size_t{1};
        1:  310:	auto expectedNode5 = size_t{4};
        1:  311:	auto expectedNode6 = size_t{3};
        1:  312:	auto expectedNode7 = size_t{5};
        1:  313:	tree.insert(expectedNode1);
        1:  313-block  0
        1:  314:	tree.insert(expectedNode2);
        1:  314-block  0
        1:  315:	tree.insert(expectedNode3);
        1:  315-block  0
        1:  316:	tree.insert(expectedNode4);
        1:  316-block  0
        1:  317:	tree.insert(expectedNode5);
        1:  317-block  0
        1:  318:	tree.insert(expectedNode6);
        1:  318-block  0
        1:  319:	tree.insert(expectedNode7);
        1:  319-block  0
        -:  320:	auto expectedTreeInSymmetricOrder = BinarySearchTreeExpectations::getExpectedTreeOutputFormat({
        -:  321:		                                                                                              expectedNode4,
        -:  322:		                                                                                              expectedNode2,
        -:  323:		                                                                                              expectedNode6,
        -:  324:		                                                                                              expectedNode5,
        -:  325:		                                                                                              expectedNode7,
        -:  326:		                                                                                              expectedNode1,
        -:  327:		                                                                                              expectedNode3
        1:  328:	                                                                                              });
        1:  328-block  0
    $$$$$:  328-block  1
    $$$$$:  328-block  2
    $$$$$:  328-block  3
        1:  329:	std::ostringstream output;
        1:  329-block  0
    $$$$$:  329-block  1
        -:  330:
        1:  331:	tree.printTreeInSymmetricOrder(output);
        1:  331-block  0
        -:  332:
       2*:  333:	ASSERT_EQ(expectedTreeInSymmetricOrder, output.str());
        1:  333-block  0
        1:  333-block  1
    %%%%%:  333-block  2
    %%%%%:  333-block  3
    %%%%%:  333-block  4
    %%%%%:  333-block  5
    $$$$$:  333-block  6
    $$$$$:  333-block  7
    $$$$$:  333-block  8
    $$$$$:  333-block  9
    $$$$$:  333-block 10
    $$$$$:  333-block 11
        -:  334:}
------------------
        -:  335:
        4:  336:TEST_F(BinarySearchTreeTest, prints_tree_in_pre_order) {
        -:  337:
        1:  338:	auto expectedNode1 = size_t{7};
        1:  339:	auto expectedNode2 = size_t{2};
        1:  340:	auto expectedNode3 = size_t{8};
        1:  341:	auto expectedNode4 = size_t{1};
        1:  342:	auto expectedNode5 = size_t{4};
        1:  343:	auto expectedNode6 = size_t{3};
        1:  344:	auto expectedNode7 = size_t{5};
        1:  345:	tree.insert(expectedNode1);
        1:  346:	tree.insert(expectedNode2);
        1:  347:	tree.insert(expectedNode3);
        1:  348:	tree.insert(expectedNode4);
        1:  349:	tree.insert(expectedNode5);
        1:  350:	tree.insert(expectedNode6);
        1:  351:	tree.insert(expectedNode7);
        -:  352:	auto expectedTreeInPreOrder = BinarySearchTreeExpectations::getExpectedTreeOutputFormat({
        -:  353:		                                                                                              expectedNode1,
        -:  354:		                                                                                              expectedNode2,
        -:  355:		                                                                                              expectedNode4,
        -:  356:		                                                                                              expectedNode5,
        -:  357:		                                                                                              expectedNode6,
        -:  358:		                                                                                              expectedNode7,
        -:  359:		                                                                                              expectedNode3
        1:  360:	                                                                                              });
        1:  361:	std::ostringstream output;
        -:  362:
        1:  363:	tree.printTreeInPreOrder(output);
        -:  364:
       2*:  365:	ASSERT_EQ(expectedTreeInPreOrder, output.str());
        -:  366:}
------------------
_ZN50BinarySearchTreeTest_prints_tree_in_pre_order_TestC2Ev:
        1:  336:TEST_F(BinarySearchTreeTest, prints_tree_in_pre_order) {
        1:  336-block  0
------------------
_ZN50BinarySearchTreeTest_prints_tree_in_pre_order_TestD0Ev:
        1:  336:TEST_F(BinarySearchTreeTest, prints_tree_in_pre_order) {
        1:  336-block  0
------------------
_ZN50BinarySearchTreeTest_prints_tree_in_pre_order_TestD2Ev:
        1:  336:TEST_F(BinarySearchTreeTest, prints_tree_in_pre_order) {
        1:  336-block  0
------------------
_ZN50BinarySearchTreeTest_prints_tree_in_pre_order_Test8TestBodyEv:
        1:  336:TEST_F(BinarySearchTreeTest, prints_tree_in_pre_order) {
        -:  337:
        1:  338:	auto expectedNode1 = size_t{7};
        1:  339:	auto expectedNode2 = size_t{2};
        1:  340:	auto expectedNode3 = size_t{8};
        1:  341:	auto expectedNode4 = size_t{1};
        1:  342:	auto expectedNode5 = size_t{4};
        1:  343:	auto expectedNode6 = size_t{3};
        1:  344:	auto expectedNode7 = size_t{5};
        1:  345:	tree.insert(expectedNode1);
        1:  345-block  0
        1:  346:	tree.insert(expectedNode2);
        1:  346-block  0
        1:  347:	tree.insert(expectedNode3);
        1:  347-block  0
        1:  348:	tree.insert(expectedNode4);
        1:  348-block  0
        1:  349:	tree.insert(expectedNode5);
        1:  349-block  0
        1:  350:	tree.insert(expectedNode6);
        1:  350-block  0
        1:  351:	tree.insert(expectedNode7);
        1:  351-block  0
        -:  352:	auto expectedTreeInPreOrder = BinarySearchTreeExpectations::getExpectedTreeOutputFormat({
        -:  353:		                                                                                              expectedNode1,
        -:  354:		                                                                                              expectedNode2,
        -:  355:		                                                                                              expectedNode4,
        -:  356:		                                                                                              expectedNode5,
        -:  357:		                                                                                              expectedNode6,
        -:  358:		                                                                                              expectedNode7,
        -:  359:		                                                                                              expectedNode3
        1:  360:	                                                                                              });
        1:  360-block  0
    $$$$$:  360-block  1
    $$$$$:  360-block  2
    $$$$$:  360-block  3
        1:  361:	std::ostringstream output;
        1:  361-block  0
    $$$$$:  361-block  1
        -:  362:
        1:  363:	tree.printTreeInPreOrder(output);
        1:  363-block  0
        -:  364:
       2*:  365:	ASSERT_EQ(expectedTreeInPreOrder, output.str());
        1:  365-block  0
        1:  365-block  1
    %%%%%:  365-block  2
    %%%%%:  365-block  3
    %%%%%:  365-block  4
    %%%%%:  365-block  5
    $$$$$:  365-block  6
    $$$$$:  365-block  7
    $$$$$:  365-block  8
    $$$$$:  365-block  9
    $$$$$:  365-block 10
    $$$$$:  365-block 11
        -:  366:}
------------------
        -:  367:
        4:  368:TEST_F(BinarySearchTreeTest, prints_tree_in_post_order) {
        -:  369:
        1:  370:	auto expectedNode1 = size_t{7};
        1:  371:	auto expectedNode2 = size_t{2};
        1:  372:	auto expectedNode3 = size_t{8};
        1:  373:	auto expectedNode4 = size_t{1};
        1:  374:	auto expectedNode5 = size_t{4};
        1:  375:	auto expectedNode6 = size_t{3};
        1:  376:	auto expectedNode7 = size_t{5};
        1:  377:	tree.insert(expectedNode1);
        1:  378:	tree.insert(expectedNode2);
        1:  379:	tree.insert(expectedNode3);
        1:  380:	tree.insert(expectedNode4);
        1:  381:	tree.insert(expectedNode5);
        1:  382:	tree.insert(expectedNode6);
        1:  383:	tree.insert(expectedNode7);
        -:  384:	auto expectedTreeInPostOrder = BinarySearchTreeExpectations::getExpectedTreeOutputFormat({
        -:  385:		                                                                                        expectedNode4,
        -:  386:		                                                                                        expectedNode6,
        -:  387:		                                                                                        expectedNode7,
        -:  388:		                                                                                        expectedNode5,
        -:  389:		                                                                                        expectedNode2,
        -:  390:		                                                                                        expectedNode3,
        -:  391:		                                                                                        expectedNode1
        1:  392:	                                                                                        });
        1:  393:	std::ostringstream output;
        -:  394:
        1:  395:	tree.printTreeInPostOrder(output);
        -:  396:
       2*:  397:	ASSERT_EQ(expectedTreeInPostOrder, output.str());
        -:  398:}
------------------
_ZN51BinarySearchTreeTest_prints_tree_in_post_order_TestC2Ev:
        1:  368:TEST_F(BinarySearchTreeTest, prints_tree_in_post_order) {
        1:  368-block  0
------------------
_ZN51BinarySearchTreeTest_prints_tree_in_post_order_TestD0Ev:
        1:  368:TEST_F(BinarySearchTreeTest, prints_tree_in_post_order) {
        1:  368-block  0
------------------
_ZN51BinarySearchTreeTest_prints_tree_in_post_order_TestD2Ev:
        1:  368:TEST_F(BinarySearchTreeTest, prints_tree_in_post_order) {
        1:  368-block  0
------------------
_ZN51BinarySearchTreeTest_prints_tree_in_post_order_Test8TestBodyEv:
        1:  368:TEST_F(BinarySearchTreeTest, prints_tree_in_post_order) {
        -:  369:
        1:  370:	auto expectedNode1 = size_t{7};
        1:  371:	auto expectedNode2 = size_t{2};
        1:  372:	auto expectedNode3 = size_t{8};
        1:  373:	auto expectedNode4 = size_t{1};
        1:  374:	auto expectedNode5 = size_t{4};
        1:  375:	auto expectedNode6 = size_t{3};
        1:  376:	auto expectedNode7 = size_t{5};
        1:  377:	tree.insert(expectedNode1);
        1:  377-block  0
        1:  378:	tree.insert(expectedNode2);
        1:  378-block  0
        1:  379:	tree.insert(expectedNode3);
        1:  379-block  0
        1:  380:	tree.insert(expectedNode4);
        1:  380-block  0
        1:  381:	tree.insert(expectedNode5);
        1:  381-block  0
        1:  382:	tree.insert(expectedNode6);
        1:  382-block  0
        1:  383:	tree.insert(expectedNode7);
        1:  383-block  0
        -:  384:	auto expectedTreeInPostOrder = BinarySearchTreeExpectations::getExpectedTreeOutputFormat({
        -:  385:		                                                                                        expectedNode4,
        -:  386:		                                                                                        expectedNode6,
        -:  387:		                                                                                        expectedNode7,
        -:  388:		                                                                                        expectedNode5,
        -:  389:		                                                                                        expectedNode2,
        -:  390:		                                                                                        expectedNode3,
        -:  391:		                                                                                        expectedNode1
        1:  392:	                                                                                        });
        1:  392-block  0
    $$$$$:  392-block  1
    $$$$$:  392-block  2
    $$$$$:  392-block  3
        1:  393:	std::ostringstream output;
        1:  393-block  0
    $$$$$:  393-block  1
        -:  394:
        1:  395:	tree.printTreeInPostOrder(output);
        1:  395-block  0
        -:  396:
       2*:  397:	ASSERT_EQ(expectedTreeInPostOrder, output.str());
        1:  397-block  0
        1:  397-block  1
    %%%%%:  397-block  2
    %%%%%:  397-block  3
    %%%%%:  397-block  4
    %%%%%:  397-block  5
    $$$$$:  397-block  6
    $$$$$:  397-block  7
    $$$$$:  397-block  8
    $$$$$:  397-block  9
    $$$$$:  397-block 10
    $$$$$:  397-block 11
        -:  398:}
------------------
        -:  399:
        4:  400:TEST_F(BinarySearchTreeTest, inserts_value_in_tree) {
        -:  401:
        1:  402:	auto expectedValue = RandomValues::getRandomNumber<size_t>();
        -:  403:
        1:  404:	tree.insert(expectedValue);
        -:  405:
       1*:  406:	ASSERT_TRUE(tree.contains(expectedValue));
        -:  407:}
------------------
_ZN47BinarySearchTreeTest_inserts_value_in_tree_TestC2Ev:
        1:  400:TEST_F(BinarySearchTreeTest, inserts_value_in_tree) {
        1:  400-block  0
------------------
_ZN47BinarySearchTreeTest_inserts_value_in_tree_TestD0Ev:
        1:  400:TEST_F(BinarySearchTreeTest, inserts_value_in_tree) {
        1:  400-block  0
------------------
_ZN47BinarySearchTreeTest_inserts_value_in_tree_TestD2Ev:
        1:  400:TEST_F(BinarySearchTreeTest, inserts_value_in_tree) {
        1:  400-block  0
------------------
_ZN47BinarySearchTreeTest_inserts_value_in_tree_Test8TestBodyEv:
        1:  400:TEST_F(BinarySearchTreeTest, inserts_value_in_tree) {
        -:  401:
        1:  402:	auto expectedValue = RandomValues::getRandomNumber<size_t>();
        1:  402-block  0
        -:  403:
        1:  404:	tree.insert(expectedValue);
        -:  405:
       1*:  406:	ASSERT_TRUE(tree.contains(expectedValue));
        1:  406-block  0
        1:  406-block  1
    %%%%%:  406-block  2
    %%%%%:  406-block  3
    %%%%%:  406-block  4
    %%%%%:  406-block  5
    %%%%%:  406-block  6
    $$$$$:  406-block  7
    $$$$$:  406-block  8
    $$$$$:  406-block  9
    $$$$$:  406-block 10
    $$$$$:  406-block 11
    $$$$$:  406-block 12
    $$$$$:  406-block 13
        -:  407:}
------------------
        -:  408:
        4:  409:TEST_F(BinarySearchTreeTest, trying_to_insert_a_value_that_already_exists_throws_logic_error) {
        -:  410:
        1:  411:	auto expectedValue = RandomValues::getRandomNumber<size_t>();
        -:  412:
        1:  413:	tree.insert(expectedValue);
        -:  414:
       2*:  415:	ASSERT_THROW(tree.insert(expectedValue), logic_error);
        -:  416:}
------------------
_ZN89BinarySearchTreeTest_trying_to_insert_a_value_that_already_exists_throws_logic_error_TestC2Ev:
        1:  409:TEST_F(BinarySearchTreeTest, trying_to_insert_a_value_that_already_exists_throws_logic_error) {
        1:  409-block  0
------------------
_ZN89BinarySearchTreeTest_trying_to_insert_a_value_that_already_exists_throws_logic_error_TestD0Ev:
        1:  409:TEST_F(BinarySearchTreeTest, trying_to_insert_a_value_that_already_exists_throws_logic_error) {
        1:  409-block  0
------------------
_ZN89BinarySearchTreeTest_trying_to_insert_a_value_that_already_exists_throws_logic_error_TestD2Ev:
        1:  409:TEST_F(BinarySearchTreeTest, trying_to_insert_a_value_that_already_exists_throws_logic_error) {
        1:  409-block  0
------------------
_ZN89BinarySearchTreeTest_trying_to_insert_a_value_that_already_exists_throws_logic_error_Test8TestBodyEv:
        1:  409:TEST_F(BinarySearchTreeTest, trying_to_insert_a_value_that_already_exists_throws_logic_error) {
        -:  410:
        1:  411:	auto expectedValue = RandomValues::getRandomNumber<size_t>();
        1:  411-block  0
        -:  412:
        1:  413:	tree.insert(expectedValue);
        -:  414:
       2*:  415:	ASSERT_THROW(tree.insert(expectedValue), logic_error);
        1:  415-block  0
        1:  415-block  1
        1:  415-block  2
        1:  415-block  3
        1:  415-block  4
    %%%%%:  415-block  5
    %%%%%:  415-block  6
    %%%%%:  415-block  7
    %%%%%:  415-block  8
    %%%%%:  415-block  9
    %%%%%:  415-block 10
        1:  415-block 11
    $$$$$:  415-block 12
    $$$$$:  415-block 13
    $$$$$:  415-block 14
    $$$$$:  415-block 15
    $$$$$:  415-block 16
    $$$$$:  415-block 17
    $$$$$:  415-block 18
    $$$$$:  415-block 19
    $$$$$:  415-block 20
    $$$$$:  415-block 21
    $$$$$:  415-block 22
    $$$$$:  415-block 23
    $$$$$:  415-block 24
    $$$$$:  415-block 25
    $$$$$:  415-block 26
    $$$$$:  415-block 27
    $$$$$:  415-block 28
    $$$$$:  415-block 29
        -:  416:}
------------------
        -:  417:
        4:  418:TEST_F(BinarySearchTreeTest, inserts_value_in_tree_using_std_move) {
        -:  419:
        1:  420:	auto expectedValue = RandomValues::getRandomNumber<size_t>();
        -:  421:
        1:  422:	tree.insert(std::move(expectedValue));
        -:  423:
       1*:  424:	ASSERT_TRUE(tree.contains(expectedValue));
        -:  425:}
------------------
_ZN62BinarySearchTreeTest_inserts_value_in_tree_using_std_move_TestC2Ev:
        1:  418:TEST_F(BinarySearchTreeTest, inserts_value_in_tree_using_std_move) {
        1:  418-block  0
------------------
_ZN62BinarySearchTreeTest_inserts_value_in_tree_using_std_move_TestD0Ev:
        1:  418:TEST_F(BinarySearchTreeTest, inserts_value_in_tree_using_std_move) {
        1:  418-block  0
------------------
_ZN62BinarySearchTreeTest_inserts_value_in_tree_using_std_move_TestD2Ev:
        1:  418:TEST_F(BinarySearchTreeTest, inserts_value_in_tree_using_std_move) {
        1:  418-block  0
------------------
_ZN62BinarySearchTreeTest_inserts_value_in_tree_using_std_move_Test8TestBodyEv:
        1:  418:TEST_F(BinarySearchTreeTest, inserts_value_in_tree_using_std_move) {
        -:  419:
        1:  420:	auto expectedValue = RandomValues::getRandomNumber<size_t>();
        1:  420-block  0
        -:  421:
        1:  422:	tree.insert(std::move(expectedValue));
        -:  423:
       1*:  424:	ASSERT_TRUE(tree.contains(expectedValue));
        1:  424-block  0
        1:  424-block  1
    %%%%%:  424-block  2
    %%%%%:  424-block  3
    %%%%%:  424-block  4
    %%%%%:  424-block  5
    %%%%%:  424-block  6
    $$$$$:  424-block  7
    $$$$$:  424-block  8
    $$$$$:  424-block  9
    $$$$$:  424-block 10
    $$$$$:  424-block 11
    $$$$$:  424-block 12
    $$$$$:  424-block 13
        -:  425:}
------------------
        -:  426:
        4:  427:TEST_F(BinarySearchTreeTest, trying_to_insert_a_value_using_std_move_that_already_exists_throws_logic_error) {
        -:  428:
        1:  429:	auto expectedValue = RandomValues::getRandomNumber<size_t>();
        -:  430:
        1:  431:	tree.insert(std::move(expectedValue));
        -:  432:
       2*:  433:	ASSERT_THROW(tree.insert(std::move(expectedValue)), logic_error);
        -:  434:}
